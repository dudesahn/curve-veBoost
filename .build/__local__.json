{
  "manifest": "ethpm/3",
  "sources": {
    "BoostV3Sidechain.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0x3c46a594163df3213d9e5e37ded23e13"
      },
      "content": "# @version 0.3.3\n\"\"\"\n@title Boost Delegation V3 - Sidechain Edition w/ Overwrite\n@author CurveFi\n\"\"\"\n\n\nevent Approval:\n    _owner: indexed(address)\n    _spender: indexed(address)\n    _value: uint256\n\nevent Transfer:\n    _from: indexed(address)\n    _to: indexed(address)\n    _value: uint256\n\nevent Boost:\n    _from: indexed(address)\n    _to: indexed(address)\n    _bias: uint256\n    _slope: uint256\n    _start: uint256\n\n\ninterface VotingEscrow:\n    def balanceOf(_user: address) -> uint256: view\n    def totalSupply() -> uint256: view\n    def locked(_user: address) -> LockedBalance: view\n\n\nstruct LockedBalance:\n    amount: int128\n    end: uint256\n\nstruct Point:\n    bias: uint256\n    slope: uint256\n    ts: uint256\n\n\nNAME: constant(String[32]) = \"Vote-Escrowed Boost\"\nSYMBOL: constant(String[8]) = \"veBoost\"\nVERSION: constant(String[8]) = \"v3.0.0\"\n\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\")\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n\nWEEK: constant(uint256) = 86400 * 7\n\n\nDOMAIN_SEPARATOR: immutable(bytes32)\nVE: immutable(address)\n\n\noverwrites: public(HashMap[address, address])\n\nallowance: public(HashMap[address, HashMap[address, uint256]])\nnonces: public(HashMap[address, uint256])\n\ndelegated: public(HashMap[address, Point])\ndelegated_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\nreceived: public(HashMap[address, Point])\nreceived_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\n\n@external\ndef __init__(_ve: address):\n    DOMAIN_SEPARATOR = keccak256(_abi_encode(EIP712_TYPEHASH, keccak256(NAME), keccak256(VERSION), chain.id, self, block.prevhash))\n    VE = _ve\n\n    log Transfer(ZERO_ADDRESS, msg.sender, 0)\n\n\n@view\n@internal\ndef _checkpoint_read(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        point.bias -= point.slope * (ts - point.ts)\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    return point\n\n\n@internal\ndef _checkpoint_write(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    dbias: uint256 = 0\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        amount: uint256 = point.slope * (ts - point.ts)\n\n        dbias += amount\n        point.bias -= amount\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    if _delegated == False and dbias != 0:  # received boost\n        log Transfer(_user, ZERO_ADDRESS, dbias)\n\n    return point\n\n\n@view\n@internal\ndef _check_overwrite(_user: address) -> address:\n    \"\"\"\n    @notice Check if we need to override the ve balance of one address with another\n    @param _user User address to check\n    \"\"\"\n    userOverwrite: address = _user\n    if self.overwrites[_user] != ZERO_ADDRESS:\n        userOverwrite = self.overwrites[_user]\n    \n    return userOverwrite\n\n\n@view\n@internal\ndef _balance_of(_user: address) -> uint256:\n    \n    # check for an overwrite\n    userOverwrite: address = _user\n    userOverwrite = self._check_overwrite(_user)\n\n    amount: uint256 = VotingEscrow(VE).balanceOf(userOverwrite)\n\n    point: Point = self._checkpoint_read(userOverwrite, True)\n    amount -= (point.bias - point.slope * (block.timestamp - point.ts))\n\n    point = self._checkpoint_read(userOverwrite, False)\n    amount += (point.bias - point.slope * (block.timestamp - point.ts))\n    return amount\n\n@internal\ndef _boost(_from: address, _to: address, _amount: uint256, _endtime: uint256):\n    # check for an overwrite\n    fromOverwrite: address = _from\n    fromOverwrite = self._check_overwrite(_from)\n    \n    assert _to not in [_from, ZERO_ADDRESS, fromOverwrite]\n    assert _amount != 0\n    assert _endtime > block.timestamp\n    assert _endtime % WEEK == 0\n    assert _endtime <= VotingEscrow(VE).locked(fromOverwrite).end\n\n    # checkpoint delegated point\n    point: Point = self._checkpoint_write(fromOverwrite, True)\n    assert _amount <= VotingEscrow(VE).balanceOf(fromOverwrite) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n    # calculate slope and bias being added\n    slope: uint256 = _amount / (_endtime - block.timestamp)\n    bias: uint256 = slope * (_endtime - block.timestamp)\n\n    # update delegated point\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.delegated[fromOverwrite] = point\n    self.delegated_slope_changes[fromOverwrite][_endtime] += slope\n\n    # update received amount\n    point = self._checkpoint_write(_to, False)\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.received[_to] = point\n    self.received_slope_changes[_to][_endtime] += slope\n\n    log Transfer(fromOverwrite, _to, _amount)\n    log Boost(fromOverwrite, _to, bias, slope, block.timestamp)\n\n    # also checkpoint received and delegated\n    self.received[fromOverwrite] = self._checkpoint_write(fromOverwrite, False)\n    self.delegated[_to] = self._checkpoint_write(_to, True)\n\n\n@external\ndef boost(_to: address, _amount: uint256, _endtime: uint256, _from: address = msg.sender):\n    # reduce approval if necessary\n    if _from != msg.sender:\n        # if the message sender is not delegating their own boost, make sure the \"from\" address has approved msg.sender\n        #  for enough tokens\n        allowance: uint256 = self.allowance[_from][msg.sender]\n        if allowance != MAX_UINT256:\n            self.allowance[_from][msg.sender] = allowance - _amount\n            log Approval(_from, msg.sender, allowance - _amount)\n\n    self._boost(_from, _to, _amount, _endtime)\n\n\n@external\ndef checkpoint_user(_user: address):\n    self.delegated[_user] = self._checkpoint_write(_user, True)\n    self.received[_user] = self._checkpoint_write(_user, False)\n\n\n@external\ndef approve(_spender: address, _value: uint256) -> bool:\n    self.allowance[msg.sender][_spender] = _value\n\n    log Approval(msg.sender, _spender, _value)\n    return True\n\n\n@external\ndef permit(_owner: address, _spender: address, _value: uint256, _deadline: uint256, _v: uint8, _r: bytes32, _s: bytes32) -> bool:\n    assert _owner != ZERO_ADDRESS\n    assert block.timestamp <= _deadline\n\n    nonce: uint256 = self.nonces[_owner]\n    digest: bytes32 = keccak256(\n        concat(\n            b\"\\x19\\x01\",\n            DOMAIN_SEPARATOR,\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\n        )\n    )\n\n    assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\n\n    self.allowance[_owner][_spender] = _value\n    self.nonces[_owner] = nonce + 1\n\n    log Approval(_owner, _spender, _value)\n    return True\n\n\n@external\ndef setOverwrite(_mainnetLocker: address, _localLocker: address):\n    allowance: uint256 = self.allowance[_mainnetLocker][_localLocker]\n    self.overwrites[_localLocker] = _mainnetLocker\n    \n    # if we use ZERO_ADDRESS, we are cancelling the overwrite\n    if _mainnetLocker == ZERO_ADDRESS:\n        if allowance != 0:\n            self.allowance[_mainnetLocker][_localLocker] = 0\n            log Approval(_mainnetLocker, _localLocker, 0)\n    else:\n        # if we are overwriting, make sure our local address can spend the balance of our mainnet address\n        if allowance != MAX_UINT256:\n            self.allowance[_mainnetLocker][_localLocker] = MAX_UINT256\n            log Approval(_mainnetLocker, _localLocker, MAX_UINT256)\n\n\n@external\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@external\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@view\n@external\ndef balanceOf(_user: address) -> uint256:\n    return self._balance_of(_user)\n\n\n@view\n@external\ndef totalSupply() -> uint256:\n    return VotingEscrow(VE).totalSupply()\n\n\n@view\n@external\ndef delegated_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, True)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef received_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, False)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef delegable_balance(_user: address) -> uint256:\n    \n    # check for an overwrite\n    userOverwrite: address = _user\n    userOverwrite = self._check_overwrite(_user)\n    \n    point: Point = self._checkpoint_read(userOverwrite, True)\n    return VotingEscrow(VE).balanceOf(userOverwrite) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n\n@pure\n@external\ndef name() -> String[32]:\n    return NAME\n\n\n@pure\n@external\ndef symbol() -> String[8]:\n    return SYMBOL\n\n\n@pure\n@external\ndef decimals() -> uint8:\n    return 18\n\n\n@pure\n@external\ndef DOMAIN_SEPARATOR() -> bytes32:\n    return DOMAIN_SEPARATOR\n\n\n@pure\n@external\ndef VE() -> address:\n    return VE",
      "references": [],
      "imports": []
    },
    "VotingEscrowDelegation.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0x831d50bfbc3cda696924e29965c12c8b"
      },
      "content": "# @version 0.3.1\n\"\"\"\n@title Voting Escrow Delegation\n@author Curve Finance\n@license MIT\n@dev Provides test functions only available in test mode (`brownie test`)\n\"\"\"\n\n\ninterface ERC721Receiver:\n    def onERC721Received(\n        _operator: address, _from: address, _token_id: uint256, _data: Bytes[4096]\n    ) -> bytes32:\n        nonpayable\n\ninterface VotingEscrow:\n    def balanceOf(_account: address) -> int256: view\n    def locked__end(_addr: address) -> uint256: view\n\n\nevent Approval:\n    _owner: indexed(address)\n    _approved: indexed(address)\n    _token_id: indexed(uint256)\n\nevent ApprovalForAll:\n    _owner: indexed(address)\n    _operator: indexed(address)\n    _approved: bool\n\nevent Transfer:\n    _from: indexed(address)\n    _to: indexed(address)\n    _token_id: indexed(uint256)\n\nevent BurnBoost:\n    _delegator: indexed(address)\n    _receiver: indexed(address)\n    _token_id: indexed(uint256)\n\nevent DelegateBoost:\n    _delegator: indexed(address)\n    _receiver: indexed(address)\n    _token_id: indexed(uint256)\n    _amount: uint256\n    _cancel_time: uint256\n    _expire_time: uint256\n\nevent ExtendBoost:\n    _delegator: indexed(address)\n    _receiver: indexed(address)\n    _token_id: indexed(uint256)\n    _amount: uint256\n    _expire_time: uint256\n    _cancel_time: uint256\n\nevent TransferBoost:\n    _from: indexed(address)\n    _to: indexed(address)\n    _token_id: indexed(uint256)\n    _amount: uint256\n    _expire_time: uint256\n\nevent GreyListUpdated:\n    _receiver: indexed(address)\n    _delegator: indexed(address)\n    _status: bool\n\n\nstruct Boost:\n    # [bias uint128][slope int128]\n    delegated: uint256\n    received: uint256\n    # [total active delegations 128][next expiry 128]\n    expiry_data: uint256\n\nstruct Token:\n    # [bias uint128][slope int128]\n    data: uint256\n    # [delegator pos 128][cancel time 128]\n    dinfo: uint256\n    # [global 128][local 128]\n    position: uint256\n    expire_time: uint256\n\nstruct Point:\n    bias: int256\n    slope: int256\n\n\nIDENTITY_PRECOMPILE: constant(address) = 0x0000000000000000000000000000000000000004\nMAX_PCT: constant(uint256) = 10_000\nWEEK: constant(uint256) = 86400 * 7\n\nVOTING_ESCROW: immutable(address)\n\n\nbalanceOf: public(HashMap[address, uint256])\ngetApproved: public(HashMap[uint256, address])\nisApprovedForAll: public(HashMap[address, HashMap[address, bool]])\nownerOf: public(HashMap[uint256, address])\n\nname: public(String[32])\nsymbol: public(String[32])\nbase_uri: public(String[128])\n\ntotalSupply: public(uint256)\n# use totalSupply to determine the length\ntokenByIndex: public(HashMap[uint256, uint256])\n# use balanceOf to determine the length\ntokenOfOwnerByIndex: public(HashMap[address, uint256[MAX_UINT256]])\n\nboost: HashMap[address, Boost]\nboost_tokens: HashMap[uint256, Token]\n\ntoken_of_delegator_by_index: public(HashMap[address, uint256[MAX_UINT256]])\ntotal_minted: public(HashMap[address, uint256])\n# address => timestamp => # of delegations expiring\naccount_expiries: public(HashMap[address, HashMap[uint256, uint256]])\n\nadmin: public(address)  # Can and will be a smart contract\nfuture_admin: public(address)\n\n# The grey list - per-user black and white lists\n# users can make this a blacklist or a whitelist - defaults to blacklist\n# gray_list[_receiver][_delegator]\n# by default is blacklist, with no delegators blacklisted\n# if [_receiver][ZERO_ADDRESS] is False = Blacklist, True = Whitelist\n# if this is a blacklist, receivers disallow any delegations from _delegator if it is True\n# if this is a whitelist, receivers only allow delegations from _delegator if it is True\n# Delegation will go through if: not (grey_list[_receiver][ZERO_ADDRESS] ^ grey_list[_receiver][_delegator])\ngrey_list: public(HashMap[address, HashMap[address, bool]])\n\n\n@external\ndef __init__(_name: String[32], _symbol: String[32], _base_uri: String[128], _ve: address):\n    self.name = _name\n    self.symbol = _symbol\n    self.base_uri = _base_uri\n\n    self.admin = msg.sender\n\n    VOTING_ESCROW = _ve\n\n\n@internal\ndef _approve(_owner: address, _approved: address, _token_id: uint256):\n    self.getApproved[_token_id] = _approved\n    log Approval(_owner, _approved, _token_id)\n\n\n@view\n@internal\ndef _is_approved_or_owner(_spender: address, _token_id: uint256) -> bool:\n    owner: address = self.ownerOf[_token_id]\n    return (\n        _spender == owner\n        or _spender == self.getApproved[_token_id]\n        or self.isApprovedForAll[owner][_spender]\n    )\n\n\n@internal\ndef _update_enumeration_data(_from: address, _to: address, _token_id: uint256):\n    delegator: address = convert(shift(_token_id, -96), address)\n    position_data: uint256 = self.boost_tokens[_token_id].position\n    local_pos: uint256 = position_data % 2 ** 128\n    global_pos: uint256 = shift(position_data, -128)\n    # position in the delegator array of minted tokens\n    delegator_pos: uint256 = shift(self.boost_tokens[_token_id].dinfo, -128)\n\n    if _from == ZERO_ADDRESS:\n        # minting - This is called before updates to balance and totalSupply\n        local_pos = self.balanceOf[_to]\n        global_pos = self.totalSupply\n        position_data = shift(global_pos, 128) + local_pos\n        # this is a new token so we get the index of a new spot\n        delegator_pos = self.total_minted[delegator]\n\n        self.tokenByIndex[global_pos] = _token_id\n        self.tokenOfOwnerByIndex[_to][local_pos] = _token_id\n        self.boost_tokens[_token_id].position = position_data\n\n        # we only mint tokens in the create_boost fn, and this is called\n        # before we update the cancel_time so we can just set the value\n        # of dinfo to the shifted position\n        self.boost_tokens[_token_id].dinfo = shift(delegator_pos, 128)\n        self.token_of_delegator_by_index[delegator][delegator_pos] = _token_id\n        self.total_minted[delegator] = delegator_pos + 1\n\n    elif _to == ZERO_ADDRESS:\n        # burning - This is called after updates to balance and totalSupply\n        # we operate on both the global array and local array\n        last_global_index: uint256 = self.totalSupply\n        last_local_index: uint256 = self.balanceOf[_from]\n        last_delegator_pos: uint256 = self.total_minted[delegator] - 1\n\n        if global_pos != last_global_index:\n            # swap - set the token we're burnings position to the token in the last index\n            last_global_token: uint256 = self.tokenByIndex[last_global_index]\n            last_global_token_pos: uint256 = self.boost_tokens[last_global_token].position\n            # update the global position of the last global token\n            self.boost_tokens[last_global_token].position = shift(global_pos, 128) + (last_global_token_pos % 2 ** 128)\n            self.tokenByIndex[global_pos] = last_global_token\n        self.tokenByIndex[last_global_index] = 0\n\n        if local_pos != last_local_index:\n            # swap - set the token we're burnings position to the token in the last index\n            last_local_token: uint256 = self.tokenOfOwnerByIndex[_from][last_local_index]\n            last_local_token_pos: uint256 = self.boost_tokens[last_local_token].position\n            # update the local position of the last local token\n            self.boost_tokens[last_local_token].position = shift(last_local_token_pos / 2 ** 128, 128) + local_pos\n            self.tokenOfOwnerByIndex[_from][local_pos] = last_local_token\n        self.tokenOfOwnerByIndex[_from][last_local_index] = 0\n        self.boost_tokens[_token_id].position = 0\n\n        if delegator_pos != last_delegator_pos:\n            last_delegator_token: uint256 = self.token_of_delegator_by_index[delegator][last_delegator_pos]\n            last_delegator_token_dinfo: uint256 = self.boost_tokens[last_delegator_token].dinfo\n            # update the last tokens position data and maintain the correct cancel time\n            self.boost_tokens[last_delegator_token].dinfo = shift(delegator_pos, 128) + (last_delegator_token_dinfo % 2 ** 128)\n            self.token_of_delegator_by_index[delegator][delegator_pos] = last_delegator_token\n        self.token_of_delegator_by_index[delegator][last_delegator_pos] = 0\n        self.boost_tokens[_token_id].dinfo = 0  # we are burning the token so we can just set to 0\n        self.total_minted[delegator] = last_delegator_pos\n\n    else:\n        # transfering - called between balance updates\n        from_last_index: uint256 = self.balanceOf[_from]\n\n        if local_pos != from_last_index:\n            # swap - set the token we're burnings position to the token in the last index\n            last_local_token: uint256 = self.tokenOfOwnerByIndex[_from][from_last_index]\n            last_local_token_pos: uint256 = self.boost_tokens[last_local_token].position\n            # update the local position of the last local token\n            self.boost_tokens[last_local_token].position = shift(last_local_token_pos / 2 ** 128, 128) + local_pos\n            self.tokenOfOwnerByIndex[_from][local_pos] = last_local_token\n        self.tokenOfOwnerByIndex[_from][from_last_index] = 0\n\n        # to is simple we just add to the end of the list\n        local_pos = self.balanceOf[_to]\n        self.tokenOfOwnerByIndex[_to][local_pos] = _token_id\n        self.boost_tokens[_token_id].position = shift(global_pos, 128) + local_pos\n\n\n@internal\ndef _burn(_token_id: uint256):\n    owner: address = self.ownerOf[_token_id]\n\n    self._approve(owner, ZERO_ADDRESS, _token_id)\n\n    self.balanceOf[owner] -= 1\n    self.ownerOf[_token_id] = ZERO_ADDRESS\n    self.totalSupply -= 1\n\n    self._update_enumeration_data(owner, ZERO_ADDRESS, _token_id)\n\n    log Transfer(owner, ZERO_ADDRESS, _token_id)\n\n\n@internal\ndef _mint(_to: address, _token_id: uint256):\n    assert _to != ZERO_ADDRESS  # dev: minting to ZERO_ADDRESS disallowed\n    assert self.ownerOf[_token_id] == ZERO_ADDRESS  # dev: token exists\n\n    self._update_enumeration_data(ZERO_ADDRESS, _to, _token_id)\n\n    self.balanceOf[_to] += 1\n    self.ownerOf[_token_id] = _to\n    self.totalSupply += 1\n\n    log Transfer(ZERO_ADDRESS, _to, _token_id)\n\n\n@internal\ndef _mint_boost(_token_id: uint256, _delegator: address, _receiver: address, _bias: int256, _slope: int256, _cancel_time: uint256, _expire_time: uint256):\n    is_whitelist: uint256 = convert(self.grey_list[_receiver][ZERO_ADDRESS], uint256)\n    delegator_status: uint256 = convert(self.grey_list[_receiver][_delegator], uint256)\n    assert not convert(bitwise_xor(is_whitelist, delegator_status), bool)  # dev: mint boost not allowed\n\n    data: uint256 = shift(convert(_bias, uint256), 128) + convert(abs(_slope), uint256)\n    self.boost[_delegator].delegated += data\n    self.boost[_receiver].received += data\n\n    token: Token = self.boost_tokens[_token_id]\n    token.data = data\n    token.dinfo = token.dinfo + _cancel_time\n    token.expire_time = _expire_time\n    self.boost_tokens[_token_id] = token\n\n\n@internal\ndef _burn_boost(_token_id: uint256, _delegator: address, _receiver: address, _bias: int256, _slope: int256):\n    token: Token = self.boost_tokens[_token_id]\n    expire_time: uint256 = token.expire_time\n\n    if expire_time == 0:\n        return\n\n    self.boost[_delegator].delegated -= token.data\n    self.boost[_receiver].received -= token.data\n\n    token.data = 0\n    # maintain the same position in the delegator array, but remove the cancel time\n    token.dinfo = shift(token.dinfo / 2 ** 128, 128)\n    token.expire_time = 0\n    self.boost_tokens[_token_id] = token\n\n    # update the next expiry data\n    expiry_data: uint256 = self.boost[_delegator].expiry_data\n    next_expiry: uint256 = expiry_data % 2 ** 128\n    active_delegations: uint256 = shift(expiry_data, -128) - 1\n\n    expiries: uint256 = self.account_expiries[_delegator][expire_time]\n\n    if active_delegations != 0 and expire_time == next_expiry and expiries == 0:\n        # Will be passed if\n        # active_delegations == 0, no more active boost tokens\n        # or\n        # expire_time != next_expiry, the cancelled boost token isn't the next expiring boost token\n        # or\n        # expiries != 0, the cancelled boost token isn't the only one expiring at expire_time\n        for i in range(513):  # ~10 years\n            # we essentially allow for a boost token be expired for up to 6 years\n            # 10 yrs - 4 yrs (max vecRV lock time) = ~ 6 yrs\n            if i == 512:\n                raise \"Failed to find next expiry\"\n            week_ts: uint256 = expire_time + WEEK * (i + 1)\n            if self.account_expiries[_delegator][week_ts] > 0:\n                next_expiry = week_ts\n                break\n    elif active_delegations == 0:\n        next_expiry = 0\n\n    self.boost[_delegator].expiry_data = shift(active_delegations, 128) + next_expiry\n    self.account_expiries[_delegator][expire_time] = expiries - 1\n\n\n@internal\ndef _transfer_boost(_from: address, _to: address, _bias: int256, _slope: int256):\n    data: uint256 = shift(convert(_bias, uint256), 128) + convert(abs(_slope), uint256)\n    self.boost[_from].received -= data\n    self.boost[_to].received += data\n\n\n@pure\n@internal\ndef _deconstruct_bias_slope(_data: uint256) -> Point:\n    return Point({bias: convert(shift(_data, -128), int256), slope: -convert(_data % 2 ** 128, int256)})\n\n\n@pure\n@internal\ndef _calc_bias_slope(_x: int256, _y: int256, _expire_time: int256) -> Point:\n    # SLOPE: (y2 - y1) / (x2 - x1)\n    # BIAS: y = mx + b -> y - mx = b\n    slope: int256 = -_y / (_expire_time - _x)\n    return Point({bias: _y - slope * _x, slope: slope})\n\n\n@internal\ndef _transfer(_from: address, _to: address, _token_id: uint256):\n    assert self.ownerOf[_token_id] == _from  # dev: _from is not owner\n    assert _to != ZERO_ADDRESS  # dev: transfers to ZERO_ADDRESS are disallowed\n\n    delegator: address = convert(shift(_token_id, -96), address)\n    is_whitelist: uint256 = convert(self.grey_list[_to][ZERO_ADDRESS], uint256)\n    delegator_status: uint256 = convert(self.grey_list[_to][delegator], uint256)\n    assert not convert(bitwise_xor(is_whitelist, delegator_status), bool)  # dev: transfer boost not allowed\n\n    # clear previous token approval\n    self._approve(_from, ZERO_ADDRESS, _token_id)\n\n    self.balanceOf[_from] -= 1\n    self._update_enumeration_data(_from, _to, _token_id)\n    self.balanceOf[_to] += 1\n    self.ownerOf[_token_id] = _to\n\n    tpoint: Point = self._deconstruct_bias_slope(self.boost_tokens[_token_id].data)\n    tvalue: int256 = tpoint.slope * convert(block.timestamp, int256) + tpoint.bias\n\n    # if the boost value is negative, reset the slope and bias\n    if tvalue > 0:\n        self._transfer_boost(_from, _to, tpoint.bias, tpoint.slope)\n        # y = mx + b -> y - b = mx -> (y - b)/m = x -> -b / m = x (x-intercept)\n        expiry: uint256 = convert(-tpoint.bias / tpoint.slope, uint256)\n        log TransferBoost(_from, _to, _token_id, convert(tvalue, uint256), expiry)\n    else:\n        self._burn_boost(_token_id, delegator, _from, tpoint.bias, tpoint.slope)\n        log BurnBoost(delegator, _from, _token_id)\n\n    log Transfer(_from, _to, _token_id)\n\n\n@internal\ndef _cancel_boost(_token_id: uint256, _caller: address):\n    receiver: address = self.ownerOf[_token_id]\n    assert receiver != ZERO_ADDRESS  # dev: token does not exist\n    delegator: address = convert(shift(_token_id, -96), address)\n\n    token: Token = self.boost_tokens[_token_id]\n    tpoint: Point = self._deconstruct_bias_slope(token.data)\n    tvalue: int256 = tpoint.slope * convert(block.timestamp, int256) + tpoint.bias\n\n    # if not (the owner or operator or the boost value is negative)\n    if not (_caller == receiver or self.isApprovedForAll[receiver][_caller] or tvalue <= 0):\n        if _caller == delegator or self.isApprovedForAll[delegator][_caller]:\n            # if delegator or operator, wait till after cancel time\n            assert (token.dinfo % 2 ** 128) <= block.timestamp  # dev: must wait for cancel time\n        else:\n            # All others are disallowed\n            raise \"Not allowed!\"\n    self._burn_boost(_token_id, delegator, receiver, tpoint.bias, tpoint.slope)\n\n    log BurnBoost(delegator, receiver, _token_id)\n\n\n@internal\ndef _set_delegation_status(_receiver: address, _delegator: address, _status: bool):\n    self.grey_list[_receiver][_delegator] = _status\n    log GreyListUpdated(_receiver, _delegator, _status)\n\n\n@pure\n@internal\ndef _uint_to_string(_value: uint256) -> String[78]:\n    # NOTE: Odd that this works with a raw_call inside, despite being marked\n    # a pure function\n    if _value == 0:\n        return \"0\"\n\n    buffer: Bytes[78] = b\"\"\n    digits: uint256 = 78\n\n    for i in range(78):\n        # go forward to find the # of digits, and set it\n        # only if we have found the last index\n        if digits == 78 and _value / 10 ** i == 0:\n            digits = i\n\n        value: uint256 = ((_value / 10 ** (77 - i)) % 10) + 48\n        char: Bytes[1] = slice(convert(value, bytes32), 31, 1)\n        buffer = raw_call(\n            IDENTITY_PRECOMPILE,\n            concat(buffer, char),\n            max_outsize=78,\n            is_static_call=True\n        )\n\n    return convert(slice(buffer, 78 - digits, digits), String[78])\n\n\n@external\ndef approve(_approved: address, _token_id: uint256):\n    \"\"\"\n    @notice Change or reaffirm the approved address for an NFT.\n    @dev The zero address indicates there is no approved address.\n        Throws unless `msg.sender` is the current NFT owner, or an authorized\n        operator of the current owner.\n    @param _approved The new approved NFT controller.\n    @param _token_id The NFT to approve.\n    \"\"\"\n    owner: address = self.ownerOf[_token_id]\n    assert (\n        msg.sender == owner or self.isApprovedForAll[owner][msg.sender]\n    )  # dev: must be owner or operator\n    self._approve(owner, _approved, _token_id)\n\n\n@external\ndef safeTransferFrom(_from: address, _to: address, _token_id: uint256, _data: Bytes[4096] = b\"\"):\n    \"\"\"\n    @notice Transfers the ownership of an NFT from one address to another address\n    @dev Throws unless `msg.sender` is the current owner, an authorized\n        operator, or the approved address for this NFT. Throws if `_from` is\n        not the current owner. Throws if `_to` is the zero address. Throws if\n        `_tokenId` is not a valid NFT. When transfer is complete, this function\n        checks if `_to` is a smart contract (code size > 0). If so, it calls\n        `onERC721Received` on `_to` and throws if the return value is not\n        `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    @param _from The current owner of the NFT\n    @param _to The new owner\n    @param _token_id The NFT to transfer\n    @param _data Additional data with no specified format, sent in call to `_to`, max length 4096\n    \"\"\"\n    assert self._is_approved_or_owner(msg.sender, _token_id)  # dev: neither owner nor approved\n    self._transfer(_from, _to, _token_id)\n\n    if _to.is_contract:\n        response: bytes32 = ERC721Receiver(_to).onERC721Received(\n            msg.sender, _from, _token_id, _data\n        )\n        assert slice(response, 0, 4) == method_id(\n            \"onERC721Received(address,address,uint256,bytes)\"\n        )  # dev: invalid response\n\n\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @notice Enable or disable approval for a third party (\"operator\") to manage\n        all of `msg.sender`'s assets.\n    @dev Emits the ApprovalForAll event. Multiple operators per account are allowed.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operator is approved, false to revoke approval.\n    \"\"\"\n    self.isApprovedForAll[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n\n\n@external\ndef transferFrom(_from: address, _to: address, _token_id: uint256):\n    \"\"\"\n    @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n        TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n        THEY MAY BE PERMANENTLY LOST\n    @dev Throws unless `msg.sender` is the current owner, an authorized\n        operator, or the approved address for this NFT. Throws if `_from` is\n        not the current owner. Throws if `_to` is the ZERO_ADDRESS.\n    @param _from The current owner of the NFT\n    @param _to The new owner\n    @param _token_id The NFT to transfer\n    \"\"\"\n    assert self._is_approved_or_owner(msg.sender, _token_id)  # dev: neither owner nor approved\n    self._transfer(_from, _to, _token_id)\n\n\n@view\n@external\ndef tokenURI(_token_id: uint256) -> String[256]:\n    return concat(self.base_uri, self._uint_to_string(_token_id))\n\n\n@external\ndef burn(_token_id: uint256):\n    \"\"\"\n    @notice Destroy a token\n    @dev Only callable by the token owner, their operator, or an approved account.\n        Burning a token with a currently active boost, burns the boost.\n    @param _token_id The token to burn\n    \"\"\"\n    assert self._is_approved_or_owner(msg.sender, _token_id)  # dev: neither owner nor approved\n\n    tdata: uint256 = self.boost_tokens[_token_id].data\n    if tdata != 0:\n        tpoint: Point = self._deconstruct_bias_slope(tdata)\n\n        delegator: address = convert(shift(_token_id, -96), address)\n        owner: address = self.ownerOf[_token_id]\n\n        self._burn_boost(_token_id, delegator, owner, tpoint.bias, tpoint.slope)\n\n        log BurnBoost(delegator, owner, _token_id)\n\n    self._burn(_token_id)\n\n\n@external\ndef create_boost(\n    _delegator: address,\n    _receiver: address,\n    _percentage: int256,\n    _cancel_time: uint256,\n    _expire_time: uint256,\n    _id: uint256,\n):\n    \"\"\"\n    @notice Create a boost and delegate it to another account.\n    @dev Delegated boost can become negative, and requires active management, else\n        the adjusted veCRV balance of the delegator's account will decrease until reaching 0\n    @param _delegator The account to delegate boost from\n    @param _receiver The account to receive the delegated boost\n    @param _percentage Since veCRV is a constantly decreasing asset, we use percentage to determine\n        the amount of delegator's boost to delegate\n    @param _cancel_time A point in time before _expire_time in which the delegator or their operator\n        can cancel the delegated boost\n    @param _expire_time The point in time, atleast a day in the future, at which the value of the boost\n        will reach 0. After which the negative value is deducted from the delegator's account (and the\n        receiver's received boost only) until it is cancelled. This value is rounded down to the nearest\n        WEEK.\n    @param _id The token id, within the range of [0, 2 ** 96). Useful for contracts given operator status\n        to have specific ranges.\n    \"\"\"\n    assert msg.sender == _delegator or self.isApprovedForAll[_delegator][msg.sender]  # dev: only delegator or operator\n\n    expire_time: uint256 = (_expire_time / WEEK) * WEEK\n\n    expiry_data: uint256 = self.boost[_delegator].expiry_data\n    next_expiry: uint256 = expiry_data % 2 ** 128\n\n    if next_expiry == 0:\n        next_expiry = MAX_UINT256\n\n    assert block.timestamp < next_expiry  # dev: negative boost token is in circulation\n    assert _percentage > 0  # dev: percentage must be greater than 0 bps\n    assert _percentage <= MAX_PCT  # dev: percentage must be less than 10_000 bps\n    assert _cancel_time <= expire_time  # dev: cancel time is after expiry\n\n    assert expire_time >= block.timestamp + WEEK  # dev: boost duration must be atleast WEEK\n    assert expire_time <= VotingEscrow(VOTING_ESCROW).locked__end(_delegator)  # dev: boost expiration is past voting escrow lock expiry\n    assert _id < 2 ** 96  # dev: id out of bounds\n\n    # [delegator address 160][cancel_time uint40][id uint56]\n    token_id: uint256 = shift(convert(_delegator, uint256), 96) + _id\n    # check if the token exists here before we expend more gas by minting it\n    self._mint(_receiver, token_id)\n\n    # delegated slope and bias\n    point: Point = self._deconstruct_bias_slope(self.boost[_delegator].delegated)\n\n    time: int256 = convert(block.timestamp, int256)\n\n    # delegated boost will be positive, if any of circulating boosts are negative\n    # we have already reverted\n    delegated_boost: int256 = point.slope * time + point.bias\n    y: int256 = _percentage * (VotingEscrow(VOTING_ESCROW).balanceOf(_delegator) - delegated_boost) / MAX_PCT\n    assert y > 0  # dev: no boost\n\n    point = self._calc_bias_slope(time, y, convert(expire_time, int256))\n    assert point.slope < 0  # dev: invalid slope\n\n    self._mint_boost(token_id, _delegator, _receiver, point.bias, point.slope, _cancel_time, expire_time)\n\n    # increase the number of expiries for the user\n    if expire_time < next_expiry:\n        next_expiry = expire_time\n\n    active_delegations: uint256 = shift(expiry_data, -128)\n    self.account_expiries[_delegator][expire_time] += 1\n    self.boost[_delegator].expiry_data = shift(active_delegations + 1, 128) + next_expiry\n\n    log DelegateBoost(_delegator, _receiver, token_id, convert(y, uint256), _cancel_time, _expire_time)\n\n\n@external\ndef extend_boost(_token_id: uint256, _percentage: int256, _expire_time: uint256, _cancel_time: uint256):\n    \"\"\"\n    @notice Extend the boost of an existing boost or expired boost\n    @dev The extension can not decrease the value of the boost. If there are\n        any outstanding negative value boosts which cause the delegable boost\n        of an account to be negative this call will revert\n    @param _token_id The token to extend the boost of\n    @param _percentage The percentage of delegable boost to delegate\n        AFTER burning the token's current boost\n    @param _expire_time The new time at which the boost value will become\n        0, and eventually negative. Must be greater than the previous expiry time,\n        and atleast a WEEK from now, and less than the veCRV lock expiry of the\n        delegator's account. This value is rounded down to the nearest WEEK.\n    \"\"\"\n    delegator: address = convert(shift(_token_id, -96), address)\n    receiver: address = self.ownerOf[_token_id]\n\n    assert msg.sender == delegator or self.isApprovedForAll[delegator][msg.sender]  # dev: only delegator or operator\n    assert receiver != ZERO_ADDRESS  # dev: boost token does not exist\n    assert _percentage > 0  # dev: percentage must be greater than 0 bps\n    assert _percentage <= MAX_PCT  # dev: percentage must be less than 10_000 bps\n\n    # timestamp when delegating account's voting escrow ends - also our second point (lock_expiry, 0)\n    token: Token = self.boost_tokens[_token_id]\n\n    expire_time: uint256 = (_expire_time / WEEK) * WEEK\n\n    assert _cancel_time <= expire_time  # dev: cancel time is after expiry\n    assert expire_time >= block.timestamp + WEEK  # dev: boost duration must be atleast one day\n    assert expire_time <= VotingEscrow(VOTING_ESCROW).locked__end(delegator) # dev: boost expiration is past voting escrow lock expiry\n\n    point: Point = self._deconstruct_bias_slope(token.data)\n\n    time: int256 = convert(block.timestamp, int256)\n    tvalue: int256 = point.slope * time + point.bias\n\n    # Can extend a token by increasing it's amount but not it's expiry time\n    assert expire_time >= token.expire_time  # dev: new expiration must be greater than old token expiry\n\n    # if we are extending an unexpired boost, the cancel time must the same or greater\n    # else we can adjust the cancel time to our preference\n    if _cancel_time < (token.dinfo % 2 ** 128):\n        assert block.timestamp >= token.expire_time  # dev: cancel time reduction disallowed\n\n    # storage variables have been updated: next_expiry + active_delegations\n    self._burn_boost(_token_id, delegator, receiver, point.bias, point.slope)\n\n    expiry_data: uint256 = self.boost[delegator].expiry_data\n    next_expiry: uint256 = expiry_data % 2 ** 128\n\n    if next_expiry == 0:\n        next_expiry = MAX_UINT256\n\n    assert block.timestamp < next_expiry  # dev: negative outstanding boosts\n\n    # delegated slope and bias\n    point = self._deconstruct_bias_slope(self.boost[delegator].delegated)\n\n    # verify delegated boost isn't negative, else it'll inflate out vecrv balance\n    delegated_boost: int256 = point.slope * time + point.bias\n    y: int256 = _percentage * (VotingEscrow(VOTING_ESCROW).balanceOf(delegator) - delegated_boost) / MAX_PCT\n    # a delegator can snipe the exact moment a token expires and create a boost\n    # with 10_000 or some percentage of their boost, which is perfectly fine.\n    # this check is here so the user can't extend a boost unless they actually\n    # have any to give\n    assert y > 0  # dev: no boost\n    assert y >= tvalue  # dev: cannot reduce value of boost\n\n    point = self._calc_bias_slope(time, y, convert(expire_time, int256))\n    assert point.slope < 0  # dev: invalid slope\n\n    self._mint_boost(_token_id, delegator, receiver, point.bias, point.slope, _cancel_time, expire_time)\n\n    # increase the number of expiries for the user\n    if expire_time < next_expiry:\n        next_expiry = expire_time\n\n    active_delegations: uint256 = shift(expiry_data, -128)\n    self.account_expiries[delegator][expire_time] += 1\n    self.boost[delegator].expiry_data = shift(active_delegations + 1, 128) + next_expiry\n\n    log ExtendBoost(delegator, receiver, _token_id, convert(y, uint256), expire_time, _cancel_time)\n\n\n@external\ndef cancel_boost(_token_id: uint256):\n    \"\"\"\n    @notice Cancel an outstanding boost\n    @dev This does not burn the token, only the boost it represents. The owner\n        of the token or their operator can cancel a boost at any time. The\n        delegator or their operator can only cancel a token after the cancel\n        time. Anyone can cancel the boost if the value of it is negative.\n    @param _token_id The token to cancel\n    \"\"\"\n    self._cancel_boost(_token_id, msg.sender)\n\n\n@external\ndef batch_cancel_boosts(_token_ids: uint256[256]):\n    \"\"\"\n    @notice Cancel many outstanding boosts\n    @dev This does not burn the token, only the boost it represents. The owner\n        of the token or their operator can cancel a boost at any time. The\n        delegator or their operator can only cancel a token after the cancel\n        time. Anyone can cancel the boost if the value of it is negative.\n    @param _token_ids A list of 256 token ids to nullify. The list must\n        be padded with 0 values if less than 256 token ids are provided.\n    \"\"\"\n\n    for _token_id in _token_ids:\n        if _token_id == 0:\n            break\n        self._cancel_boost(_token_id, msg.sender)\n\n\n@external\ndef set_delegation_status(_receiver: address, _delegator: address, _status: bool):\n    \"\"\"\n    @notice Set or reaffirm the blacklist/whitelist status of a delegator for a receiver.\n    @dev Setting delegator as the ZERO_ADDRESS enables users to deactive delegations globally\n        and enable the white list. The ability of a delegator to delegate to a receiver\n        is determined by ~(grey_list[_receiver][ZERO_ADDRESS] ^ grey_list[_receiver][_delegator]).\n    @param _receiver The account which we will be updating it's list\n    @param _delegator The account to disallow/allow delegations from\n    @param _status Boolean of the status to set the _delegator account to\n    \"\"\"\n    assert msg.sender == _receiver or self.isApprovedForAll[_receiver][msg.sender]\n    self._set_delegation_status(_receiver, _delegator, _status)\n\n\n@external\ndef batch_set_delegation_status(_receiver: address, _delegators: address[256], _status: uint256[256]):\n    \"\"\"\n    @notice Set or reaffirm the blacklist/whitelist status of multiple delegators for a receiver.\n    @dev Setting delegator as the ZERO_ADDRESS enables users to deactive delegations globally\n        and enable the white list. The ability of a delegator to delegate to a receiver\n        is determined by ~(grey_list[_receiver][ZERO_ADDRESS] ^ grey_list[_receiver][_delegator]).\n    @param _receiver The account which we will be updating it's list\n    @param _delegators List of 256 accounts to disallow/allow delegations from\n    @param _status List of 256 0s and 1s (booleans) of the status to set the _delegator_i account to.\n        if the value is not 0 or 1, execution will break, effectively stopping at the index.\n\n    \"\"\"\n    assert msg.sender == _receiver or self.isApprovedForAll[_receiver][msg.sender]  # dev: only receiver or operator\n\n    for i in range(256):\n        if _status[i] > 1:\n            break\n        self._set_delegation_status(_receiver, _delegators[i], convert(_status[i], bool))\n\n\n@view\n@external\ndef adjusted_balance_of(_account: address) -> uint256:\n    \"\"\"\n    @notice Adjusted veCRV balance after accounting for delegations and boosts\n    @dev If boosts/delegations have a negative value, they're effective value is 0\n    @param _account The account to query the adjusted balance of\n    \"\"\"\n    next_expiry: uint256 = self.boost[_account].expiry_data % 2 ** 128\n    if next_expiry != 0 and next_expiry < block.timestamp:\n        # if the account has a negative boost in circulation\n        # we over penalize by setting their adjusted balance to 0\n        # this is because we don't want to iterate to find the real\n        # value\n        return 0\n\n    adjusted_balance: int256 = VotingEscrow(VOTING_ESCROW).balanceOf(_account)\n\n    boost: Boost = self.boost[_account]\n    time: int256 = convert(block.timestamp, int256)\n\n    if boost.delegated != 0:\n        dpoint: Point = self._deconstruct_bias_slope(boost.delegated)\n\n        # we take the absolute value, since delegated boost can be negative\n        # if any outstanding negative boosts are in circulation\n        # this can inflate the vecrv balance of a user\n        # taking the absolute value has the effect that it costs\n        # a user to negatively impact another's vecrv balance\n        adjusted_balance -= abs(dpoint.slope * time + dpoint.bias)\n\n    if boost.received != 0:\n        rpoint: Point = self._deconstruct_bias_slope(boost.received)\n\n        # similar to delegated boost, our received boost can be negative\n        # if any outstanding negative boosts are in our possession\n        # However, unlike delegated boost, we do not negatively impact\n        # our adjusted balance due to negative boosts. Instead we take\n        # whichever is greater between 0 and the value of our received\n        # boosts.\n        adjusted_balance += max(rpoint.slope * time + rpoint.bias, empty(int256))\n\n    # since we took the absolute value of our delegated boost, it now instead of\n    # becoming negative is positive, and will continue to increase ...\n    # meaning if we keep a negative outstanding delegated balance for long\n    # enought it will not only decrease our vecrv_balance but also our received\n    # boost, however we return the maximum between our adjusted balance and 0\n    # when delegating boost, received boost isn't used for determining how\n    # much we can delegate.\n    return convert(max(adjusted_balance, empty(int256)), uint256)\n\n\n@view\n@external\ndef delegated_boost(_account: address) -> uint256:\n    \"\"\"\n    @notice Query the total effective delegated boost value of an account.\n    @dev This value can be greater than the veCRV balance of\n        an account if the account has outstanding negative\n        value boosts.\n    @param _account The account to query\n    \"\"\"\n    dpoint: Point = self._deconstruct_bias_slope(self.boost[_account].delegated)\n    time: int256 = convert(block.timestamp, int256)\n    return convert(abs(dpoint.slope * time + dpoint.bias), uint256)\n\n\n@view\n@external\ndef received_boost(_account: address) -> uint256:\n    \"\"\"\n    @notice Query the total effective received boost value of an account\n    @dev This value can be 0, even with delegations which have a large value,\n        if the account has any outstanding negative value boosts.\n    @param _account The account to query\n    \"\"\"\n    rpoint: Point = self._deconstruct_bias_slope(self.boost[_account].received)\n    time: int256 = convert(block.timestamp, int256)\n    return convert(max(rpoint.slope * time + rpoint.bias, empty(int256)), uint256)\n\n\n@view\n@external\ndef token_boost(_token_id: uint256) -> int256:\n    \"\"\"\n    @notice Query the effective value of a boost\n    @dev The effective value of a boost is negative after it's expiration\n        date.\n    @param _token_id The token id to query\n    \"\"\"\n    tpoint: Point = self._deconstruct_bias_slope(self.boost_tokens[_token_id].data)\n    time: int256 = convert(block.timestamp, int256)\n    return tpoint.slope * time + tpoint.bias\n\n\n@view\n@external\ndef token_expiry(_token_id: uint256) -> uint256:\n    \"\"\"\n    @notice Query the timestamp of a boost token's expiry\n    @dev The effective value of a boost is negative after it's expiration\n        date.\n    @param _token_id The token id to query\n    \"\"\"\n    return self.boost_tokens[_token_id].expire_time\n\n\n@view\n@external\ndef token_cancel_time(_token_id: uint256) -> uint256:\n    \"\"\"\n    @notice Query the timestamp of a boost token's cancel time. This is\n        the point at which the delegator can nullify the boost. A receiver\n        can cancel a token at any point. Anyone can nullify a token's boost\n        after it's expiration.\n    @param _token_id The token id to query\n    \"\"\"\n    return self.boost_tokens[_token_id].dinfo % 2 ** 128\n\n\n@view\n@external\ndef calc_boost_bias_slope(\n    _delegator: address,\n    _percentage: int256,\n    _expire_time: int256,\n    _extend_token_id: uint256 = 0\n) -> (int256, int256):\n    \"\"\"\n    @notice Calculate the bias and slope for a boost.\n    @param _delegator The account to delegate boost from\n    @param _percentage The percentage of the _delegator's delegable\n        veCRV to delegate.\n    @param _expire_time The time at which the boost value of the token\n        will reach 0, and subsequently become negative\n    @param _extend_token_id OPTIONAL token id, which if set will first nullify\n        the boost of the token, before calculating the bias and slope. Useful\n        for calculating the new bias and slope when extending a token, or\n        determining the bias and slope of a subsequent token after cancelling\n        an existing one. Will have no effect if _delegator is not the delegator\n        of the token.\n    \"\"\"\n    time: int256 = convert(block.timestamp, int256)\n    assert _percentage > 0  # dev: percentage must be greater than 0\n    assert _percentage <= MAX_PCT  # dev: percentage must be less than or equal to 100%\n    assert _expire_time > time + WEEK  # dev: Invalid min expiry time\n\n    lock_expiry: int256 = convert(VotingEscrow(VOTING_ESCROW).locked__end(_delegator), int256)\n    assert _expire_time <= lock_expiry\n\n    ddata: uint256 = self.boost[_delegator].delegated\n\n    if _extend_token_id != 0 and convert(shift(_extend_token_id, -96), address) == _delegator:\n        # decrease the delegated bias and slope by the token's bias and slope\n        # only if it is the delegator's and it is within the bounds of existence\n        ddata -= self.boost_tokens[_extend_token_id].data\n\n    dpoint: Point = self._deconstruct_bias_slope(ddata)\n\n    delegated_boost: int256 = dpoint.slope * time + dpoint.bias\n    assert delegated_boost >= 0  # dev: outstanding negative boosts\n\n    y: int256 = _percentage * (VotingEscrow(VOTING_ESCROW).balanceOf(_delegator) - delegated_boost) / MAX_PCT\n    assert y > 0  # dev: no boost\n\n    slope: int256 = -y / (_expire_time - time)\n    assert slope < 0  # dev: invalid slope\n\n    bias: int256 = y - slope * time\n\n    return bias, slope\n\n\n@pure\n@external\ndef get_token_id(_delegator: address, _id: uint256) -> uint256:\n    \"\"\"\n    @notice Simple method to get the token id's mintable by a delegator\n    @param _delegator The address of the delegator\n    @param _id The id value, must be less than 2 ** 96\n    \"\"\"\n    assert _id < 2 ** 96  # dev: invalid _id\n    return shift(convert(_delegator, uint256), 96) + _id\n\n\n@external\ndef commit_transfer_ownership(_addr: address):\n    \"\"\"\n    @notice Transfer ownership of contract to `addr`\n    @param _addr Address to have ownership transferred to\n    \"\"\"\n    assert msg.sender == self.admin  # dev: admin only\n    self.future_admin = _addr\n\n\n@external\ndef accept_transfer_ownership():\n    \"\"\"\n    @notice Accept admin role, only callable by future admin\n    \"\"\"\n    future_admin: address = self.future_admin\n    assert msg.sender == future_admin\n    self.admin = future_admin\n\n\n@external\ndef set_base_uri(_base_uri: String[128]):\n    assert msg.sender == self.admin\n    self.base_uri = _base_uri\n",
      "references": [],
      "imports": []
    },
    "BoostV2.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0xe0a37d687102eaa5adeed0018dab99fa"
      },
      "content": "# @version 0.3.3\n\"\"\"\n@title Boost Delegation V2\n@author CurveFi\n\"\"\"\n\n\nevent Approval:\n    _owner: indexed(address)\n    _spender: indexed(address)\n    _value: uint256\n\nevent Transfer:\n    _from: indexed(address)\n    _to: indexed(address)\n    _value: uint256\n\nevent Boost:\n    _from: indexed(address)\n    _to: indexed(address)\n    _bias: uint256\n    _slope: uint256\n    _start: uint256\n\nevent Migrate:\n    _token_id: indexed(uint256)\n\n\ninterface BoostV1:\n    def ownerOf(_token_id: uint256) -> address: view\n    def token_boost(_token_id: uint256) -> int256: view\n    def token_expiry(_token_id: uint256) -> uint256: view\n\ninterface VotingEscrow:\n    def balanceOf(_user: address) -> uint256: view\n    def totalSupply() -> uint256: view\n    def locked__end(_user: address) -> uint256: view\n\n\nstruct Point:\n    bias: uint256\n    slope: uint256\n    ts: uint256\n\n\nNAME: constant(String[32]) = \"Vote-Escrowed Boost\"\nSYMBOL: constant(String[8]) = \"veBoost\"\nVERSION: constant(String[8]) = \"v2.0.0\"\n\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\")\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n\nWEEK: constant(uint256) = 86400 * 7\n\n\nBOOST_V1: immutable(address)\nDOMAIN_SEPARATOR: immutable(bytes32)\nVE: immutable(address)\n\n\nallowance: public(HashMap[address, HashMap[address, uint256]])\nnonces: public(HashMap[address, uint256])\n\ndelegated: public(HashMap[address, Point])\ndelegated_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\nreceived: public(HashMap[address, Point])\nreceived_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\nmigrated: public(HashMap[uint256, bool])\n\n\n@external\ndef __init__(_boost_v1: address, _ve: address):\n    BOOST_V1 = _boost_v1\n    DOMAIN_SEPARATOR = keccak256(_abi_encode(EIP712_TYPEHASH, keccak256(NAME), keccak256(VERSION), chain.id, self, block.prevhash))\n    VE = _ve\n\n    log Transfer(ZERO_ADDRESS, msg.sender, 0)\n\n\n@view\n@internal\ndef _checkpoint_read(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        point.bias -= point.slope * (ts - point.ts)\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    return point\n\n\n@internal\ndef _checkpoint_write(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    dbias: uint256 = 0\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        amount: uint256 = point.slope * (ts - point.ts)\n\n        dbias += amount\n        point.bias -= amount\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    if _delegated == False and dbias != 0:  # received boost\n        log Transfer(_user, ZERO_ADDRESS, dbias)\n\n    return point\n\n\n@view\n@internal\ndef _balance_of(_user: address) -> uint256:\n    amount: uint256 = VotingEscrow(VE).balanceOf(_user)\n\n    point: Point = self._checkpoint_read(_user, True)\n    amount -= (point.bias - point.slope * (block.timestamp - point.ts))\n\n    point = self._checkpoint_read(_user, False)\n    amount += (point.bias - point.slope * (block.timestamp - point.ts))\n    return amount\n\n\n@internal\ndef _boost(_from: address, _to: address, _amount: uint256, _endtime: uint256):\n    assert _to not in [_from, ZERO_ADDRESS]\n    assert _amount != 0\n    assert _endtime > block.timestamp\n    assert _endtime % WEEK == 0\n    assert _endtime <= VotingEscrow(VE).locked__end(_from)\n\n    # checkpoint delegated point\n    point: Point = self._checkpoint_write(_from, True)\n    assert _amount <= VotingEscrow(VE).balanceOf(_from) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n    # calculate slope and bias being added\n    slope: uint256 = _amount / (_endtime - block.timestamp)\n    bias: uint256 = slope * (_endtime - block.timestamp)\n\n    # update delegated point\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.delegated[_from] = point\n    self.delegated_slope_changes[_from][_endtime] += slope\n\n    # update received amount\n    point = self._checkpoint_write(_to, False)\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.received[_to] = point\n    self.received_slope_changes[_to][_endtime] += slope\n\n    log Transfer(_from, _to, _amount)\n    log Boost(_from, _to, bias, slope, block.timestamp)\n\n    # also checkpoint received and delegated\n    self.received[_from] = self._checkpoint_write(_from, False)\n    self.delegated[_to] = self._checkpoint_write(_to, True)\n\n\n@external\ndef boost(_to: address, _amount: uint256, _endtime: uint256, _from: address = msg.sender):\n    # reduce approval if necessary\n    if _from != msg.sender:\n        allowance: uint256 = self.allowance[_from][msg.sender]\n        if allowance != MAX_UINT256:\n            self.allowance[_from][msg.sender] = allowance - _amount\n            log Approval(_from, msg.sender, allowance - _amount)\n\n    self._boost(_from, _to, _amount, _endtime)\n\n\n@external\ndef migrate(_token_id: uint256):\n    assert not self.migrated[_token_id]\n\n    self._boost(\n        convert(shift(_token_id, -96), address),  # from\n        BoostV1(BOOST_V1).ownerOf(_token_id),  # to\n        convert(BoostV1(BOOST_V1).token_boost(_token_id), uint256),  # amount\n        BoostV1(BOOST_V1).token_expiry(_token_id),  # expiry\n    )\n\n    self.migrated[_token_id] = True\n    log Migrate(_token_id)\n\n\n@external\ndef checkpoint_user(_user: address):\n    self.delegated[_user] = self._checkpoint_write(_user, True)\n    self.received[_user] = self._checkpoint_write(_user, False)\n\n\n@external\ndef approve(_spender: address, _value: uint256) -> bool:\n    self.allowance[msg.sender][_spender] = _value\n\n    log Approval(msg.sender, _spender, _value)\n    return True\n\n\n@external\ndef permit(_owner: address, _spender: address, _value: uint256, _deadline: uint256, _v: uint8, _r: bytes32, _s: bytes32) -> bool:\n    assert _owner != ZERO_ADDRESS\n    assert block.timestamp <= _deadline\n\n    nonce: uint256 = self.nonces[_owner]\n    digest: bytes32 = keccak256(\n        concat(\n            b\"\\x19\\x01\",\n            DOMAIN_SEPARATOR,\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\n        )\n    )\n\n    assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\n\n    self.allowance[_owner][_spender] = _value\n    self.nonces[_owner] = nonce + 1\n\n    log Approval(_owner, _spender, _value)\n    return True\n\n\n@external\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@external\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@view\n@external\ndef balanceOf(_user: address) -> uint256:\n    return self._balance_of(_user)\n\n\n@view\n@external\ndef adjusted_balance_of(_user: address) -> uint256:\n    return self._balance_of(_user)\n\n\n@view\n@external\ndef totalSupply() -> uint256:\n    return VotingEscrow(VE).totalSupply()\n\n\n@view\n@external\ndef delegated_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, True)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef received_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, False)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef delegable_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, True)\n    return VotingEscrow(VE).balanceOf(_user) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n\n@pure\n@external\ndef name() -> String[32]:\n    return NAME\n\n\n@pure\n@external\ndef symbol() -> String[8]:\n    return SYMBOL\n\n\n@pure\n@external\ndef decimals() -> uint8:\n    return 18\n\n\n@pure\n@external\ndef BOOST_V1() -> address:\n    return BOOST_V1\n\n\n@pure\n@external\ndef DOMAIN_SEPARATOR() -> bytes32:\n    return DOMAIN_SEPARATOR\n\n\n@pure\n@external\ndef VE() -> address:\n    return VE\n",
      "references": [],
      "imports": []
    },
    "Migrate.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0x87e7dbadce98b3412e45cbcca9fcbe88"
      },
      "content": "# @version 0.3.3\n\n\ninterface BoostV1:\n    def tokenByIndex(_idx: uint256) -> uint256: view\n    def totalSupply() -> uint256: view\n    def token_expiry(_token_id: uint256) -> uint256: view\n\ninterface BoostV2:\n    def migrate(_token_id: uint256): nonpayable\n\n\n@external\ndef __init__(_boost_v1: address, _boost_v2: address):\n    total: uint256 = BoostV1(_boost_v1).totalSupply()\n    for i in range(256):\n        if i == total:\n            break\n        token_id: uint256 = BoostV1(_boost_v1).tokenByIndex(i)\n        if BoostV1(_boost_v1).token_expiry(token_id) <= block.timestamp:\n            continue\n        BoostV2(_boost_v2).migrate(token_id)\n    selfdestruct(msg.sender)\n",
      "references": [],
      "imports": []
    },
    "BoostV2Sidechain.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0xf1fa3d77a1093a8b594d3302f4c0ee99"
      },
      "content": "# @version 0.3.3\n\"\"\"\n@title Boost Delegation V2 - Sidechain Edition\n@author CurveFi\n\"\"\"\n\n\nevent Approval:\n    _owner: indexed(address)\n    _spender: indexed(address)\n    _value: uint256\n\nevent Transfer:\n    _from: indexed(address)\n    _to: indexed(address)\n    _value: uint256\n\nevent Boost:\n    _from: indexed(address)\n    _to: indexed(address)\n    _bias: uint256\n    _slope: uint256\n    _start: uint256\n\n\ninterface VotingEscrow:\n    def balanceOf(_user: address) -> uint256: view\n    def totalSupply() -> uint256: view\n    def locked(_user: address) -> LockedBalance: view\n\n\nstruct LockedBalance:\n    amount: int128\n    end: uint256\n\nstruct Point:\n    bias: uint256\n    slope: uint256\n    ts: uint256\n\n\nNAME: constant(String[32]) = \"Vote-Escrowed Boost\"\nSYMBOL: constant(String[8]) = \"veBoost\"\nVERSION: constant(String[8]) = \"v2.0.0\"\n\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\")\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n\nWEEK: constant(uint256) = 86400 * 7\n\n\nDOMAIN_SEPARATOR: immutable(bytes32)\nVE: immutable(address)\n\n\nallowance: public(HashMap[address, HashMap[address, uint256]])\nnonces: public(HashMap[address, uint256])\n\ndelegated: public(HashMap[address, Point])\ndelegated_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\nreceived: public(HashMap[address, Point])\nreceived_slope_changes: public(HashMap[address, HashMap[uint256, uint256]])\n\n\n@external\ndef __init__(_ve: address):\n    DOMAIN_SEPARATOR = keccak256(_abi_encode(EIP712_TYPEHASH, keccak256(NAME), keccak256(VERSION), chain.id, self, block.prevhash))\n    VE = _ve\n\n    log Transfer(ZERO_ADDRESS, msg.sender, 0)\n\n\n@view\n@internal\ndef _checkpoint_read(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        point.bias -= point.slope * (ts - point.ts)\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    return point\n\n\n@internal\ndef _checkpoint_write(_user: address, _delegated: bool) -> Point:\n    point: Point = empty(Point)\n\n    if _delegated:\n        point = self.delegated[_user]\n    else:\n        point = self.received[_user]\n\n    if point.ts == 0:\n        point.ts = block.timestamp\n\n    if point.ts == block.timestamp:\n        return point\n\n    dbias: uint256 = 0\n    ts: uint256 = (point.ts / WEEK) * WEEK\n    for _ in range(255):\n        ts += WEEK\n\n        dslope: uint256 = 0\n        if block.timestamp < ts:\n            ts = block.timestamp\n        else:\n            if _delegated:\n                dslope = self.delegated_slope_changes[_user][ts]\n            else:\n                dslope = self.received_slope_changes[_user][ts]\n\n        amount: uint256 = point.slope * (ts - point.ts)\n\n        dbias += amount\n        point.bias -= amount\n        point.slope -= dslope\n        point.ts = ts\n\n        if ts == block.timestamp:\n            break\n\n    if _delegated == False and dbias != 0:  # received boost\n        log Transfer(_user, ZERO_ADDRESS, dbias)\n\n    return point\n\n\n@view\n@internal\ndef _balance_of(_user: address) -> uint256:\n    amount: uint256 = VotingEscrow(VE).balanceOf(_user)\n\n    point: Point = self._checkpoint_read(_user, True)\n    amount -= (point.bias - point.slope * (block.timestamp - point.ts))\n\n    point = self._checkpoint_read(_user, False)\n    amount += (point.bias - point.slope * (block.timestamp - point.ts))\n    return amount\n\n\n@internal\ndef _boost(_from: address, _to: address, _amount: uint256, _endtime: uint256):\n    assert _to not in [_from, ZERO_ADDRESS]\n    assert _amount != 0\n    assert _endtime > block.timestamp\n    assert _endtime % WEEK == 0\n    assert _endtime <= VotingEscrow(VE).locked(_from).end\n\n    # checkpoint delegated point\n    point: Point = self._checkpoint_write(_from, True)\n    assert _amount <= VotingEscrow(VE).balanceOf(_from) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n    # calculate slope and bias being added\n    slope: uint256 = _amount / (_endtime - block.timestamp)\n    bias: uint256 = slope * (_endtime - block.timestamp)\n\n    # update delegated point\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.delegated[_from] = point\n    self.delegated_slope_changes[_from][_endtime] += slope\n\n    # update received amount\n    point = self._checkpoint_write(_to, False)\n    point.bias += bias\n    point.slope += slope\n\n    # store updated values\n    self.received[_to] = point\n    self.received_slope_changes[_to][_endtime] += slope\n\n    log Transfer(_from, _to, _amount)\n    log Boost(_from, _to, bias, slope, block.timestamp)\n\n    # also checkpoint received and delegated\n    self.received[_from] = self._checkpoint_write(_from, False)\n    self.delegated[_to] = self._checkpoint_write(_to, True)\n\n\n@external\ndef boost(_to: address, _amount: uint256, _endtime: uint256, _from: address = msg.sender):\n    # reduce approval if necessary\n    if _from != msg.sender:\n        allowance: uint256 = self.allowance[_from][msg.sender]\n        if allowance != MAX_UINT256:\n            self.allowance[_from][msg.sender] = allowance - _amount\n            log Approval(_from, msg.sender, allowance - _amount)\n\n    self._boost(_from, _to, _amount, _endtime)\n\n\n@external\ndef checkpoint_user(_user: address):\n    self.delegated[_user] = self._checkpoint_write(_user, True)\n    self.received[_user] = self._checkpoint_write(_user, False)\n\n\n@external\ndef approve(_spender: address, _value: uint256) -> bool:\n    self.allowance[msg.sender][_spender] = _value\n\n    log Approval(msg.sender, _spender, _value)\n    return True\n\n\n@external\ndef permit(_owner: address, _spender: address, _value: uint256, _deadline: uint256, _v: uint8, _r: bytes32, _s: bytes32) -> bool:\n    assert _owner != ZERO_ADDRESS\n    assert block.timestamp <= _deadline\n\n    nonce: uint256 = self.nonces[_owner]\n    digest: bytes32 = keccak256(\n        concat(\n            b\"\\x19\\x01\",\n            DOMAIN_SEPARATOR,\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\n        )\n    )\n\n    assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\n\n    self.allowance[_owner][_spender] = _value\n    self.nonces[_owner] = nonce + 1\n\n    log Approval(_owner, _spender, _value)\n    return True\n\n\n@external\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@external\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\n    self.allowance[msg.sender][_spender] = allowance\n\n    log Approval(msg.sender, _spender, allowance)\n    return True\n\n\n@view\n@external\ndef balanceOf(_user: address) -> uint256:\n    return self._balance_of(_user)\n\n\n@view\n@external\ndef totalSupply() -> uint256:\n    return VotingEscrow(VE).totalSupply()\n\n\n@view\n@external\ndef delegated_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, True)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef received_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, False)\n    return point.bias - point.slope * (block.timestamp - point.ts)\n\n\n@view\n@external\ndef delegable_balance(_user: address) -> uint256:\n    point: Point = self._checkpoint_read(_user, True)\n    return VotingEscrow(VE).balanceOf(_user) - (point.bias - point.slope * (block.timestamp - point.ts))\n\n\n@pure\n@external\ndef name() -> String[32]:\n    return NAME\n\n\n@pure\n@external\ndef symbol() -> String[8]:\n    return SYMBOL\n\n\n@pure\n@external\ndef decimals() -> uint8:\n    return 18\n\n\n@pure\n@external\ndef DOMAIN_SEPARATOR() -> bytes32:\n    return DOMAIN_SEPARATOR\n\n\n@pure\n@external\ndef VE() -> address:\n    return VE",
      "references": [],
      "imports": []
    },
    "DelegationProxy.vy": {
      "urls": [],
      "checksum": {
        "algorithm": "md5",
        "hash": "0x7b7798199359c337d611242d60a583de"
      },
      "content": "# @version 0.2.15\n\"\"\"\n@title Voting Escrow Delegation Proxy\n@author Curve Finance\n@license MIT\n\"\"\"\n\nfrom vyper.interfaces import ERC20\n\n\ninterface VeDelegation:\n    def adjusted_balance_of(_account: address) -> uint256: view\n\n\nevent CommitAdmins:\n    ownership_admin: address\n    emergency_admin: address\n\nevent ApplyAdmins:\n    ownership_admin: address\n    emergency_admin: address\n\nevent DelegationSet:\n    delegation: address\n\n\nVOTING_ESCROW: constant(address) = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\n\n\ndelegation: public(address)\n\nemergency_admin: public(address)\nownership_admin: public(address)\nfuture_emergency_admin: public(address)\nfuture_ownership_admin: public(address)\n\n\n@external\ndef __init__(_delegation: address, _o_admin: address, _e_admin: address):\n    self.delegation = _delegation\n\n    self.ownership_admin = _o_admin\n    self.emergency_admin = _e_admin\n\n    log DelegationSet(_delegation)\n\n\n@view\n@external\ndef adjusted_balance_of(_account: address) -> uint256:\n    \"\"\"\n    @notice Get the adjusted veCRV balance from the active boost delegation contract\n    @param _account The account to query the adjusted veCRV balance of\n    @return veCRV balance\n    \"\"\"\n    _delegation: address = self.delegation\n    if _delegation == ZERO_ADDRESS:\n        return ERC20(VOTING_ESCROW).balanceOf(_account)\n    return VeDelegation(_delegation).adjusted_balance_of(_account)\n\n\n@external\ndef kill_delegation():\n    \"\"\"\n    @notice Set delegation contract to 0x00, disabling boost delegation\n    @dev Callable by the emergency admin in case of an issue with the delegation logic\n    \"\"\"\n    assert msg.sender in [self.ownership_admin, self.emergency_admin]\n\n    self.delegation = ZERO_ADDRESS\n    log DelegationSet(ZERO_ADDRESS)\n\n\n@external\ndef set_delegation(_delegation: address):\n    \"\"\"\n    @notice Set the delegation contract\n    @dev Only callable by the ownership admin\n    @param _delegation `VotingEscrowDelegation` deployment address\n    \"\"\"\n    assert msg.sender == self.ownership_admin\n\n    # call `adjusted_balance_of` to make sure it works\n    VeDelegation(_delegation).adjusted_balance_of(msg.sender)\n\n    self.delegation = _delegation\n    log DelegationSet(_delegation)\n\n\n@external\ndef commit_set_admins(_o_admin: address, _e_admin: address):\n    \"\"\"\n    @notice Set ownership admin to `_o_admin` and emergency admin to `_e_admin`\n    @param _o_admin Ownership admin\n    @param _e_admin Emergency admin\n    \"\"\"\n    assert msg.sender == self.ownership_admin, \"Access denied\"\n\n    self.future_ownership_admin = _o_admin\n    self.future_emergency_admin = _e_admin\n\n    log CommitAdmins(_o_admin, _e_admin)\n\n\n@external\ndef apply_set_admins():\n    \"\"\"\n    @notice Apply the effects of `commit_set_admins`\n    \"\"\"\n    assert msg.sender == self.ownership_admin, \"Access denied\"\n\n    _o_admin: address = self.future_ownership_admin\n    _e_admin: address = self.future_emergency_admin\n    self.ownership_admin = _o_admin\n    self.emergency_admin = _e_admin\n\n    log ApplyAdmins(_o_admin, _e_admin)\n",
      "references": [],
      "imports": []
    }
  },
  "contractTypes": {
    "VotingEscrowDelegation": {
      "contractName": "VotingEscrowDelegation",
      "sourceId": "VotingEscrowDelegation.vy",
      "deploymentBytecode": {
        "bytecode": ""
      },
      "runtimeBytecode": {
        "bytecode": ""
      },
      "abi": [
        {
          "type": "event",
          "name": "Approval",
          "inputs": [
            { "name": "_owner", "type": "address", "indexed": true },
            { "name": "_approved", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "ApprovalForAll",
          "inputs": [
            { "name": "_owner", "type": "address", "indexed": true },
            { "name": "_operator", "type": "address", "indexed": true },
            { "name": "_approved", "type": "bool", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Transfer",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "BurnBoost",
          "inputs": [
            { "name": "_delegator", "type": "address", "indexed": true },
            { "name": "_receiver", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "DelegateBoost",
          "inputs": [
            { "name": "_delegator", "type": "address", "indexed": true },
            { "name": "_receiver", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true },
            { "name": "_amount", "type": "uint256", "indexed": false },
            { "name": "_cancel_time", "type": "uint256", "indexed": false },
            { "name": "_expire_time", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "ExtendBoost",
          "inputs": [
            { "name": "_delegator", "type": "address", "indexed": true },
            { "name": "_receiver", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true },
            { "name": "_amount", "type": "uint256", "indexed": false },
            { "name": "_expire_time", "type": "uint256", "indexed": false },
            { "name": "_cancel_time", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "TransferBoost",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_token_id", "type": "uint256", "indexed": true },
            { "name": "_amount", "type": "uint256", "indexed": false },
            { "name": "_expire_time", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "GreyListUpdated",
          "inputs": [
            { "name": "_receiver", "type": "address", "indexed": true },
            { "name": "_delegator", "type": "address", "indexed": true },
            { "name": "_status", "type": "bool", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_name", "type": "string" },
            { "name": "_symbol", "type": "string" },
            { "name": "_base_uri", "type": "string" },
            { "name": "_ve", "type": "address" }
          ]
        },
        {
          "type": "function",
          "name": "approve",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_approved", "type": "address" },
            { "name": "_token_id", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "safeTransferFrom",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_from", "type": "address" },
            { "name": "_to", "type": "address" },
            { "name": "_token_id", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "safeTransferFrom",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_from", "type": "address" },
            { "name": "_to", "type": "address" },
            { "name": "_token_id", "type": "uint256" },
            { "name": "_data", "type": "bytes" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "setApprovalForAll",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_operator", "type": "address" },
            { "name": "_approved", "type": "bool" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "transferFrom",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_from", "type": "address" },
            { "name": "_to", "type": "address" },
            { "name": "_token_id", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "tokenURI",
          "stateMutability": "view",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "burn",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "create_boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_delegator", "type": "address" },
            { "name": "_receiver", "type": "address" },
            { "name": "_percentage", "type": "int256" },
            { "name": "_cancel_time", "type": "uint256" },
            { "name": "_expire_time", "type": "uint256" },
            { "name": "_id", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "extend_boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_token_id", "type": "uint256" },
            { "name": "_percentage", "type": "int256" },
            { "name": "_expire_time", "type": "uint256" },
            { "name": "_cancel_time", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "cancel_boost",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "batch_cancel_boosts",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_token_ids", "type": "uint256[256]" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "set_delegation_status",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_receiver", "type": "address" },
            { "name": "_delegator", "type": "address" },
            { "name": "_status", "type": "bool" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "batch_set_delegation_status",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_receiver", "type": "address" },
            { "name": "_delegators", "type": "address[256]" },
            { "name": "_status", "type": "uint256[256]" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "adjusted_balance_of",
          "stateMutability": "view",
          "inputs": [{ "name": "_account", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated_boost",
          "stateMutability": "view",
          "inputs": [{ "name": "_account", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received_boost",
          "stateMutability": "view",
          "inputs": [{ "name": "_account", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "token_boost",
          "stateMutability": "view",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "int256" }]
        },
        {
          "type": "function",
          "name": "token_expiry",
          "stateMutability": "view",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "token_cancel_time",
          "stateMutability": "view",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "calc_boost_bias_slope",
          "stateMutability": "view",
          "inputs": [
            { "name": "_delegator", "type": "address" },
            { "name": "_percentage", "type": "int256" },
            { "name": "_expire_time", "type": "int256" }
          ],
          "outputs": [
            { "name": "", "type": "int256" },
            { "name": "", "type": "int256" }
          ]
        },
        {
          "type": "function",
          "name": "calc_boost_bias_slope",
          "stateMutability": "view",
          "inputs": [
            { "name": "_delegator", "type": "address" },
            { "name": "_percentage", "type": "int256" },
            { "name": "_expire_time", "type": "int256" },
            { "name": "_extend_token_id", "type": "uint256" }
          ],
          "outputs": [
            { "name": "", "type": "int256" },
            { "name": "", "type": "int256" }
          ]
        },
        {
          "type": "function",
          "name": "get_token_id",
          "stateMutability": "pure",
          "inputs": [
            { "name": "_delegator", "type": "address" },
            { "name": "_id", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "commit_transfer_ownership",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_addr", "type": "address" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "accept_transfer_ownership",
          "stateMutability": "nonpayable",
          "inputs": [],
          "outputs": []
        },
        {
          "type": "function",
          "name": "set_base_uri",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_base_uri", "type": "string" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "balanceOf",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "getApproved",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "isApprovedForAll",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "address" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "ownerOf",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "name",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "symbol",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "base_uri",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "totalSupply",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "tokenByIndex",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "tokenOfOwnerByIndex",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "token_of_delegator_by_index",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "total_minted",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "account_expiries",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "future_admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "grey_list",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "address" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        }
      ],
      "userdoc": {
        "methods": {
          "approve(address,uint256)": {
            "notice": "Change or reaffirm the approved address for an NFT."
          },
          "safeTransferFrom(address,address,uint256)": {
            "notice": "Transfers the ownership of an NFT from one address to another address"
          },
          "setApprovalForAll(address,bool)": {
            "notice": "Enable or disable approval for a third party (\"operator\") to manage all of `msg.sender`'s assets."
          },
          "transferFrom(address,address,uint256)": {
            "notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST"
          },
          "burn(uint256)": { "notice": "Destroy a token" },
          "create_boost(address,address,int256,uint256,uint256,uint256)": {
            "notice": "Create a boost and delegate it to another account."
          },
          "extend_boost(uint256,int256,uint256,uint256)": {
            "notice": "Extend the boost of an existing boost or expired boost"
          },
          "cancel_boost(uint256)": { "notice": "Cancel an outstanding boost" },
          "batch_cancel_boosts(uint256[256])": {
            "notice": "Cancel many outstanding boosts"
          },
          "set_delegation_status(address,address,bool)": {
            "notice": "Set or reaffirm the blacklist/whitelist status of a delegator for a receiver."
          },
          "batch_set_delegation_status(address,address[256],uint256[256])": {
            "notice": "Set or reaffirm the blacklist/whitelist status of multiple delegators for a receiver."
          },
          "adjusted_balance_of(address)": {
            "notice": "Adjusted veCRV balance after accounting for delegations and boosts"
          },
          "delegated_boost(address)": {
            "notice": "Query the total effective delegated boost value of an account."
          },
          "received_boost(address)": {
            "notice": "Query the total effective received boost value of an account"
          },
          "token_boost(uint256)": {
            "notice": "Query the effective value of a boost"
          },
          "token_expiry(uint256)": {
            "notice": "Query the timestamp of a boost token's expiry"
          },
          "token_cancel_time(uint256)": {
            "notice": "Query the timestamp of a boost token's cancel time. This is the point at which the delegator can nullify the boost. A receiver can cancel a token at any point. Anyone can nullify a token's boost after it's expiration."
          },
          "calc_boost_bias_slope(address,int256,int256)": {
            "notice": "Calculate the bias and slope for a boost."
          },
          "get_token_id(address,uint256)": {
            "notice": "Simple method to get the token id's mintable by a delegator"
          },
          "commit_transfer_ownership(address)": {
            "notice": "Transfer ownership of contract to `addr`"
          },
          "accept_transfer_ownership()": {
            "notice": "Accept admin role, only callable by future admin"
          }
        }
      },
      "devdoc": {
        "title": "Voting Escrow Delegation",
        "author": "Curve Finance",
        "license": "MIT",
        "details": "Provides test functions only available in test mode (`brownie test`)",
        "methods": {
          "approve(address,uint256)": {
            "details": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.",
            "params": {
              "_approved": "The new approved NFT controller.",
              "_token_id": "The NFT to approve."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_token_id": "The NFT to transfer",
              "_data": "Additional data with no specified format, sent in call to `_to`, max length 4096"
            }
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_token_id": "The NFT to transfer",
              "_data": "Additional data with no specified format, sent in call to `_to`, max length 4096"
            }
          },
          "setApprovalForAll(address,bool)": {
            "details": "Emits the ApprovalForAll event. Multiple operators per account are allowed.",
            "params": {
              "_operator": "Address to add to the set of authorized operators.",
              "_approved": "True if the operator is approved, false to revoke approval."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the ZERO_ADDRESS.",
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_token_id": "The NFT to transfer"
            }
          },
          "burn(uint256)": {
            "details": "Only callable by the token owner, their operator, or an approved account. Burning a token with a currently active boost, burns the boost.",
            "params": { "_token_id": "The token to burn" }
          },
          "create_boost(address,address,int256,uint256,uint256,uint256)": {
            "details": "Delegated boost can become negative, and requires active management, else the adjusted veCRV balance of the delegator's account will decrease until reaching 0",
            "params": {
              "_delegator": "The account to delegate boost from",
              "_receiver": "The account to receive the delegated boost",
              "_percentage": "Since veCRV is a constantly decreasing asset, we use percentage to determine the amount of delegator's boost to delegate",
              "_cancel_time": "A point in time before _expire_time in which the delegator or their operator can cancel the delegated boost",
              "_expire_time": "The point in time, atleast a day in the future, at which the value of the boost will reach 0. After which the negative value is deducted from the delegator's account (and the receiver's received boost only) until it is cancelled. This value is rounded down to the nearest WEEK.",
              "_id": "The token id, within the range of [0, 2 ** 96). Useful for contracts given operator status to have specific ranges."
            }
          },
          "extend_boost(uint256,int256,uint256,uint256)": {
            "details": "The extension can not decrease the value of the boost. If there are any outstanding negative value boosts which cause the delegable boost of an account to be negative this call will revert",
            "params": {
              "_token_id": "The token to extend the boost of",
              "_percentage": "The percentage of delegable boost to delegate AFTER burning the token's current boost",
              "_expire_time": "The new time at which the boost value will become 0, and eventually negative. Must be greater than the previous expiry time, and atleast a WEEK from now, and less than the veCRV lock expiry of the delegator's account. This value is rounded down to the nearest WEEK."
            }
          },
          "cancel_boost(uint256)": {
            "details": "This does not burn the token, only the boost it represents. The owner of the token or their operator can cancel a boost at any time. The delegator or their operator can only cancel a token after the cancel time. Anyone can cancel the boost if the value of it is negative.",
            "params": { "_token_id": "The token to cancel" }
          },
          "batch_cancel_boosts(uint256[256])": {
            "details": "This does not burn the token, only the boost it represents. The owner of the token or their operator can cancel a boost at any time. The delegator or their operator can only cancel a token after the cancel time. Anyone can cancel the boost if the value of it is negative.",
            "params": {
              "_token_ids": "A list of 256 token ids to nullify. The list must be padded with 0 values if less than 256 token ids are provided."
            }
          },
          "set_delegation_status(address,address,bool)": {
            "details": "Setting delegator as the ZERO_ADDRESS enables users to deactive delegations globally and enable the white list. The ability of a delegator to delegate to a receiver is determined by ~(grey_list[_receiver][ZERO_ADDRESS] ^ grey_list[_receiver][_delegator]).",
            "params": {
              "_receiver": "The account which we will be updating it's list",
              "_delegator": "The account to disallow/allow delegations from",
              "_status": "Boolean of the status to set the _delegator account to"
            }
          },
          "batch_set_delegation_status(address,address[256],uint256[256])": {
            "details": "Setting delegator as the ZERO_ADDRESS enables users to deactive delegations globally and enable the white list. The ability of a delegator to delegate to a receiver is determined by ~(grey_list[_receiver][ZERO_ADDRESS] ^ grey_list[_receiver][_delegator]).",
            "params": {
              "_receiver": "The account which we will be updating it's list",
              "_delegators": "List of 256 accounts to disallow/allow delegations from",
              "_status": "List of 256 0s and 1s (booleans) of the status to set the _delegator_i account to. if the value is not 0 or 1, execution will break, effectively stopping at the index."
            }
          },
          "adjusted_balance_of(address)": {
            "details": "If boosts/delegations have a negative value, they're effective value is 0",
            "params": {
              "_account": "The account to query the adjusted balance of"
            }
          },
          "delegated_boost(address)": {
            "details": "This value can be greater than the veCRV balance of an account if the account has outstanding negative value boosts.",
            "params": { "_account": "The account to query" }
          },
          "received_boost(address)": {
            "details": "This value can be 0, even with delegations which have a large value, if the account has any outstanding negative value boosts.",
            "params": { "_account": "The account to query" }
          },
          "token_boost(uint256)": {
            "details": "The effective value of a boost is negative after it's expiration date.",
            "params": { "_token_id": "The token id to query" }
          },
          "token_expiry(uint256)": {
            "details": "The effective value of a boost is negative after it's expiration date.",
            "params": { "_token_id": "The token id to query" }
          },
          "token_cancel_time(uint256)": {
            "params": { "_token_id": "The token id to query" }
          },
          "calc_boost_bias_slope(address,int256,int256)": {
            "params": {
              "_delegator": "The account to delegate boost from",
              "_percentage": "The percentage of the _delegator's delegable veCRV to delegate.",
              "_expire_time": "The time at which the boost value of the token will reach 0, and subsequently become negative",
              "_extend_token_id": "OPTIONAL token id, which if set will first nullify the boost of the token, before calculating the bias and slope. Useful for calculating the new bias and slope when extending a token, or determining the bias and slope of a subsequent token after cancelling an existing one. Will have no effect if _delegator is not the delegator of the token."
            }
          },
          "calc_boost_bias_slope(address,int256,int256,uint256)": {
            "params": {
              "_delegator": "The account to delegate boost from",
              "_percentage": "The percentage of the _delegator's delegable veCRV to delegate.",
              "_expire_time": "The time at which the boost value of the token will reach 0, and subsequently become negative",
              "_extend_token_id": "OPTIONAL token id, which if set will first nullify the boost of the token, before calculating the bias and slope. Useful for calculating the new bias and slope when extending a token, or determining the bias and slope of a subsequent token after cancelling an existing one. Will have no effect if _delegator is not the delegator of the token."
            }
          },
          "get_token_id(address,uint256)": {
            "params": {
              "_delegator": "The address of the delegator",
              "_id": "The id value, must be less than 2 ** 96"
            }
          },
          "commit_transfer_ownership(address)": {
            "params": { "_addr": "Address to have ownership transferred to" }
          }
        }
      }
    },
    "BoostV3Sidechain": {
      "contractName": "BoostV3Sidechain",
      "sourceId": "BoostV3Sidechain.vy",
      "deploymentBytecode": {
        "bytecode": "0x60206118c16000396000518060a01c6118bc576040527fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472610160527f576a762e50ddf4c74071046cf7b508f5d87c41676ea1b6c8bf07aba60e5b6306610180527f68f731a9803f5c5f15be5330fe99b1ad2675b9961a3ce3fd24252ceec90e65456101a052466101c052306101e05260014303406102005260c06101405261014080516020820120905063000017bc5260405163000017dc523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060605260206060a36117bc6100ff6300000000396117bc6040016300000000f3600436101561000d57610d11565b60003560e01c346117b75763a2114cdb811861002d573361034052610048565b63b4b3c2498118610154576064358060a01c6117b757610340525b6004358060a01c6117b7576103205233610340511461012c57600161034051602052600052604060002080336020526000526040600020905054610360527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610360511461012c57610360516024358082106117b7578082039050905060016103405160205260005260406000208033602052600052604060002090505533610340517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610360516024358082106117b75780820390509050610380526020610380a35b6103405161018052610320516101a0526024356101c0526044356101e052610152611311565b005b637de6806181186101fa576004358060a01c6117b7576101805260036101805160205260005260406000206101805160405260016060526101966101a0610ef6565b6101a0805182556020810151600183015560408101516002830155505060056101805160205260005260406000206101805160405260006060526101db6101a0610ef6565b6101a08051825560208101516001830155604081015160028301555050005b63095ea7b38118610271576004358060a01c6117b7576040526024356001336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63d505accf8118610463576004358060a01c6117b7576040526024358060a01c6117b7576060526084358060081c6117b7576080526000604051146117b75760643542116117b757600260405160205260005260406000205460a05260006002610360527f19010000000000000000000000000000000000000000000000000000000000006103805261036080516020820183610580018151815250508083019250505060206117bc6000396000518161058001526020810190507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96104a0526040516104c0526060516104e0526044356105005260a051610520526064356105405260c0610480526104808051602082012090508161058001526020810190508061056052610560905080516020820120905060c05260405160c05160e0526080516101005260a4356101205260c4356101405260206000608060e060015afa50600051186117b7576044356001604051602052600052604060002080606051602052600052604060002090505560a051600181818301106117b7578082019050905060026040516020526000526040600020556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443560e052602060e0a3600160e052602060e0f35b63ba72bdc981186105ee576004358060a01c6117b7576040526024358060a01c6117b7576060526001604051602052600052604060002080606051602052600052604060002090505460805260405160006060516020526000526040600020556040511561058c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608051146105ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160405160205260005260406000208060605160205260005260406000209050556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60a052602060a0a36105ec565b6000608051146105ec576000600160405160205260005260406000208060605160205260005260406000209050556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600060a052602060a0a35b005b6339509351811861069b576004358060a01c6117b757604052600133602052600052604060002080604051602052600052604060002090505460243581818301106117b757808201905090506060526060516001336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b63a457c2d78118610746576004358060a01c6117b75760405260013360205260005260406000208060405160205260005260406000209050546024358082106117b757808203905090506060526060516001336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b6370a08231811861077a576004358060a01c6117b7576102605260206102605161014052610775610280611191565b610280f35b6318160ddd81186107bf5760206318160ddd604052602060406004605c60206117dc6000396000515afa6107b3573d600060003e3d6000fd5b60203d106117b7576040f35b630a767cc68118610854576004358060a01c6117b757610140526101405160405260016060526107f06101c0610d17565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b757808203905090506101c05260206101c0f35b6322c18bb681186108e9576004358060a01c6117b757610140526101405160405260006060526108856101c0610d17565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b757808203905090506101c05260206101c0f35b63ca83094681186109f1576004358060a01c6117b7576101405261014051610160526101405160405261091d610180611156565b610180516101605261016051604052600160605261093c6101e0610d17565b6101e080516101805260208101516101a05260408101516101c052506370a082316101e052610160516102005260206101e060246101fc60206117dc6000396000515afa61098f573d600060003e3d6000fd5b60203d106117b7576101e051610180516101a051426101c0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b757808203905090508082106117b75780820390509050610220526020610220f35b6306fdde038118610a715760208060805260136040527f566f74652d457363726f77656420426f6f7374000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b6395d89b418118610af15760208060805260076040527f7665426f6f7374000000000000000000000000000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b63313ce5678118610b0757601260405260206040f35b633644e5158118610b265760206117bc60003960005160405260206040f35b63c863657d8118610b455760206117dc60003960005160405260206040f35b638923b5018118610b78576004358060a01c6117b757604052600060405160205260005260406000205460605260206060f35b63dd62ed3e8118610bca576004358060a01c6117b7576040526024358060a01c6117b7576060526001604051602052600052604060002080606051602052600052604060002090505460805260206080f35b637ecebe008118610bfd576004358060a01c6117b757604052600260405160205260005260406000205460605260206060f35b63f3598ad98118610c42576004358060a01c6117b7576040526003604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b63356a46808118610c86576004358060a01c6117b7576040526004604051602052600052604060002080602435602052600052604060002090505460605260206060f35b63df0cb9348118610ccb576004358060a01c6117b7576040526005604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b635ad600c98118610d0f576004358060a01c6117b7576040526006604051602052600052604060002080602435602052600052604060002090505460605260206060f35b505b60006000fd5b606036608037606051610d4f57600560405160205260005260406000208054608052600181015460a052600281015460c05250610d76565b600360405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610d82574260c0525b4260c05118610da657608051815260a051602082015260c051604082015250610ef4565b60c05162093a808082049050905062093a808082028215828483041417156117b7579050905060e052600060ff905b806101005260e05162093a8081818301106117b7578082019050905060e05260006101205260e0514210610e6057606051610e3557600660405160205260005260406000208060e051602052600052604060002090505461012052610e65565b600460405160205260005260406000208060e051602052600052604060002090505461012052610e65565b4260e0525b60805160a05160e05160c0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b7578082039050905060805260a051610120518082106117b7578082039050905060a05260e05160c0524260e05118610ed057610edb565b600101818118610dd5575b5050608051815260a051602082015260c0516040820152505b565b606036608037606051610f2e57600560405160205260005260406000208054608052600181015460a052600281015460c05250610f55565b600360405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610f61574260c0525b4260c05118610f8557608051815260a051602082015260c051604082015250611154565b600060e05260c05162093a808082049050905062093a808082028215828483041417156117b7579050905061010052600060ff905b80610120526101005162093a8081818301106117b757808201905090506101005260006101405261010051421061104a5760605161101e57600660405160205260005260406000208061010051602052600052604060002090505461014052611050565b600460405160205260005260406000208061010051602052600052604060002090505461014052611050565b42610100525b60a0516101005160c0518082106117b757808203905090508082028215828483041417156117b757905090506101605260e0516101605181818301106117b7578082019050905060e052608051610160518082106117b7578082039050905060805260a051610140518082106117b7578082039050905060a0526101005160c0524261010051186110e0576110eb565b600101818118610fba575b5050606051156110fc576000611104565b600060e05114155b1561113d5760006040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a35b608051815260a051602082015260c0516040820152505b565b60405160605260006000604051602052600052604060002054146111895760006040516020526000526040600020546060525b606051815250565b6101405161016052610140516040526111ab610180611156565b61018051610160526370a082316101a052610160516101c05260206101a060246101bc60206117dc6000396000515afa6111ea573d600060003e3d6000fd5b60203d106117b7576101a05161018052610160516040526001606052611211610200610d17565b61020080516101a05260208101516101c05260408101516101e05250610180516101a0516101c051426101e0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b757808203905090508082106117b7578082039050905061018052610160516040526000606052611297610200610d17565b61020080516101a05260208101516101c05260408101516101e05250610180516101a0516101c051426101e0518082106117b757808203905090508082028215828483041417156117b757905090508082106117b7578082039050905081818301106117b757808201905090506101805261018051815250565b61018051610200526101805160405261132b610220611156565b61022051610200526101a0516101805161024052600061026052610200516102805260016102205260006003905b60208102610240015183186113735760006102205261137e565b600101818118611359575b5050610220519050156117b75760006101c051146117b757426101e05111156117b7576101e05162093a80808206905090506117b75763cbf9fe5f6102205261020051610240526040610220602461023c60206117dc6000396000515afa6113eb573d600060003e3d6000fd5b60403d106117b7576102205180600f0b81186117b75761028052610240516102a052610280602081019050516101e051116117b757610200516040526001606052611437610280610ef6565b610280805161022052602081015161024052604081015161026052506370a0823161028052610200516102a0526020610280602461029c60206117dc6000396000515afa61148a573d600060003e3d6000fd5b60203d106117b75761028051610220516102405142610260518082106117b757808203905090508082028215828483041417156117b757905090508082106117b757808203905090508082106117b757808203905090506101c051116117b7576101c0516101e051428082106117b757808203905090508080156117b75782049050905061028052610280516101e051428082106117b757808203905090508082028215828483041417156117b757905090506102a052610220516102a05181818301106117b7578082019050905061022052610240516102805181818301106117b75780820190509050610240526003610200516020526000526040600020610220518155610240516001820155610260516002820155506004610200516020526000526040600020806101e0516020526000526040600020905080546102805181818301106117b757808201905090508155506101a05160405260006060526115f66102c0610ef6565b6102c080516102205260208101516102405260408101516102605250610220516102a05181818301106117b7578082019050905061022052610240516102805181818301106117b757808201905090506102405260056101a05160205260005260406000206102205181556102405160018201556102605160028201555060066101a0516020526000526040600020806101e0516020526000526040600020905080546102805181818301106117b757808201905090508155506101a051610200517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101c0516102c05260206102c0a36101a051610200517f9c0aa947e19ab1e2400ff167e2cb40414b570fdaf31ab646a16749ca3c4301ad6102a0516102c052610280516102e052426103005260606102c0a360056102005160205260005260406000206102005160405260006060526117536102c0610ef6565b6102c0805182556020810151600183015560408101516002830155505060036101a05160205260005260406000206101a05160405260016060526117986102c0610ef6565b6102c08051825560208101516001830155604081015160028301555050565b600080fd005b600080fd"
      },
      "runtimeBytecode": {
        "bytecode": ""
      },
      "abi": [
        {
          "type": "event",
          "name": "Approval",
          "inputs": [
            { "name": "_owner", "type": "address", "indexed": true },
            { "name": "_spender", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Transfer",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Boost",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_bias", "type": "uint256", "indexed": false },
            { "name": "_slope", "type": "uint256", "indexed": false },
            { "name": "_start", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_ve", "type": "address" }]
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" },
            { "name": "_from", "type": "address" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "checkpoint_user",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "approve",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "permit",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_owner", "type": "address" },
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" },
            { "name": "_deadline", "type": "uint256" },
            { "name": "_v", "type": "uint8" },
            { "name": "_r", "type": "bytes32" },
            { "name": "_s", "type": "bytes32" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "setOverwrite",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_mainnetLocker", "type": "address" },
            { "name": "_localLocker", "type": "address" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "increaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_added_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "decreaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_subtracted_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "balanceOf",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "totalSupply",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegable_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "name",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "symbol",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "decimals",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint8" }]
        },
        {
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "bytes32" }]
        },
        {
          "type": "function",
          "name": "VE",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "overwrites",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "allowance",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "address" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "nonces",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "delegated_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "received_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        }
      ],
      "userdoc": {},
      "devdoc": {
        "title": "Boost Delegation V3 - Sidechain Edition w/ Overwrite",
        "author": "CurveFi"
      }
    },
    "BoostV2": {
      "contractName": "BoostV2",
      "sourceId": "BoostV2.vy",
      "deploymentBytecode": {
        "bytecode": "0x60206118376000396000518060a01c6118325760405260206118576000396000518060a01c611832576060526040516300001713527fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472610180527f576a762e50ddf4c74071046cf7b508f5d87c41676ea1b6c8bf07aba60e5b63066101a0527fd61c1033330c368dfc371f5b1e7133f4794e104642e5a3c87aba7a6a3441c8ff6101c052466101e052306102005260014303406102205260c0610160526101608051602082012090506300001733526060516300001753523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060805260206080a361171361011e6300000000396117136060016300000000f3600436101561000d57610d0f565b60003560e01c3461170e5763a2114cdb811861002d573361032052610048565b63b4b3c2498118610154576064358060a01c61170e57610320525b6004358060a01c61170e576103005233610320511461012c57600061032051602052600052604060002080336020526000526040600020905054610340527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610340511461012c576103405160243580821061170e578082039050905060006103205160205260005260406000208033602052600052604060002090505533610320517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256103405160243580821061170e5780820390509050610360526020610360a35b6103205161018052610300516101a0526024356101c0526044356101e0526101526112b2565b005b63454b060881186102ba57600660043560205260005260406000205461170e5760043560601c8060a01c61170e5761018052636352211e61030052600435610320526020610300602461031c60206117136000396000515afa6101bc573d600060003e3d6000fd5b60203d1061170e57610300518060a01c61170e5761034052610340516101a05263f01e4f0b61036052600435610380526020610360602461037c60206117136000396000515afa610212573d600060003e3d6000fd5b60203d1061170e5761036051806000811261170e5790506101c052636d1ac9b56103a0526004356103c05260206103a060246103bc60206117136000396000515afa610263573d600060003e3d6000fd5b60203d1061170e576103a0516101e05261027b6112b2565b600160066004356020526000526040600020556004357fd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d5466000610300a2005b637de680618118610360576004358060a01c61170e576101805260026101805160205260005260406000206101805160405260016060526102fc6101a0610ef4565b6101a0805182556020810151600183015560408101516002830155505060046101805160205260005260406000206101805160405260006060526103416101a0610ef4565b6101a08051825560208101516001830155604081015160028301555050005b63095ea7b381186103d7576004358060a01c61170e576040526024356000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63d505accf81186105c9576004358060a01c61170e576040526024358060a01c61170e576060526084358060081c61170e5760805260006040511461170e57606435421161170e57600160405160205260005260406000205460a05260006002610360527f19010000000000000000000000000000000000000000000000000000000000006103805261036080516020820183610580018151815250508083019250505060206117336000396000518161058001526020810190507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96104a0526040516104c0526060516104e0526044356105005260a051610520526064356105405260c0610480526104808051602082012090508161058001526020810190508061056052610560905080516020820120905060c05260405160c05160e0526080516101005260a4356101205260c4356101405260206000608060e060015afa506000511861170e576044356000604051602052600052604060002080606051602052600052604060002090505560a0516001818183011061170e578082019050905060016040516020526000526040600020556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443560e052602060e0a3600160e052602060e0f35b63395093518118610676576004358060a01c61170e576040526000336020526000526040600020806040516020526000526040600020905054602435818183011061170e57808201905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b63a457c2d78118610721576004358060a01c61170e57604052600033602052600052604060002080604051602052600052604060002090505460243580821061170e57808203905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b6370a082318118610755576004358060a01c61170e576102405260206102405161014052610750610260611154565b610260f35b63bbf7408a8118610789576004358060a01c61170e576102405260206102405161014052610784610260611154565b610260f35b6318160ddd81186107ce5760206318160ddd604052602060406004605c60206117536000396000515afa6107c2573d600060003e3d6000fd5b60203d1061170e576040f35b630a767cc68118610863576004358060a01c61170e57610140526101405160405260016060526107ff6101c0610d15565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e57808203905090506101c05260206101c0f35b6322c18bb681186108f8576004358060a01c61170e57610140526101405160405260006060526108946101c0610d15565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e57808203905090506101c05260206101c0f35b63ca83094681186109de576004358060a01c61170e57610140526101405160405260016060526109296101c0610d15565b6101c080516101605260208101516101805260408101516101a052506370a082316101c052610140516101e05260206101c060246101dc60206117536000396000515afa61097c573d600060003e3d6000fd5b60203d1061170e576101c0516101605161018051426101a05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e578082039050905080821061170e5780820390509050610200526020610200f35b6306fdde038118610a5e5760208060805260136040527f566f74652d457363726f77656420426f6f7374000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b6395d89b418118610ade5760208060805260076040527f7665426f6f7374000000000000000000000000000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b63313ce5678118610af457601260405260206040f35b635d14140a8118610b1357602061171360003960005160405260206040f35b633644e5158118610b3257602061173360003960005160405260206040f35b63c863657d8118610b5157602061175360003960005160405260206040f35b63dd62ed3e8118610ba3576004358060a01c61170e576040526024358060a01c61170e576060526000604051602052600052604060002080606051602052600052604060002090505460805260206080f35b637ecebe008118610bd6576004358060a01c61170e57604052600160405160205260005260406000205460605260206060f35b63f3598ad98118610c1b576004358060a01c61170e576040526002604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b63356a46808118610c5f576004358060a01c61170e576040526003604051602052600052604060002080602435602052600052604060002090505460605260206060f35b63df0cb9348118610ca4576004358060a01c61170e576040526004604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b635ad600c98118610ce8576004358060a01c61170e576040526005604051602052600052604060002080602435602052600052604060002090505460605260206060f35b630e359f168118610d0d57600660043560205260005260406000205460405260206040f35b505b60006000fd5b606036608037606051610d4d57600460405160205260005260406000208054608052600181015460a052600281015460c05250610d74565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610d80574260c0525b4260c05118610da457608051815260a051602082015260c051604082015250610ef2565b60c05162093a808082049050905062093a8080820282158284830414171561170e579050905060e052600060ff905b806101005260e05162093a80818183011061170e578082019050905060e05260006101205260e0514210610e5e57606051610e3357600560405160205260005260406000208060e051602052600052604060002090505461012052610e63565b600360405160205260005260406000208060e051602052600052604060002090505461012052610e63565b4260e0525b60805160a05160e05160c05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e578082039050905060805260a0516101205180821061170e578082039050905060a05260e05160c0524260e05118610ece57610ed9565b600101818118610dd3575b5050608051815260a051602082015260c0516040820152505b565b606036608037606051610f2c57600460405160205260005260406000208054608052600181015460a052600281015460c05250610f53565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610f5f574260c0525b4260c05118610f8357608051815260a051602082015260c051604082015250611152565b600060e05260c05162093a808082049050905062093a8080820282158284830414171561170e579050905061010052600060ff905b80610120526101005162093a80818183011061170e5780820190509050610100526000610140526101005142106110485760605161101c5760056040516020526000526040600020806101005160205260005260406000209050546101405261104e565b60036040516020526000526040600020806101005160205260005260406000209050546101405261104e565b42610100525b60a0516101005160c05180821061170e578082039050905080820282158284830414171561170e57905090506101605260e05161016051818183011061170e578082019050905060e0526080516101605180821061170e578082039050905060805260a0516101405180821061170e578082039050905060a0526101005160c0524261010051186110de576110e9565b600101818118610fb8575b5050606051156110fa576000611102565b600060e05114155b1561113b5760006040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a35b608051815260a051602082015260c0516040820152505b565b6370a0823161018052610140516101a0526020610180602461019c60206117536000396000515afa61118b573d600060003e3d6000fd5b60203d1061170e5761018051610160526101405160405260016060526111b26101e0610d15565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e578082039050905080821061170e5780820390509050610160526101405160405260006060526112386101e0610d15565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c05180821061170e578082039050905080820282158284830414171561170e579050905080821061170e5780820390509050818183011061170e57808201905090506101605261016051815250565b6101a051610180516102205260006102405260016102005260006002905b60208102610220015183186112ea576000610200526112f5565b6001018181186112d0575b50506102005190501561170e5760006101c0511461170e57426101e051111561170e576101e05162093a808082069050905061170e5763adc635896102005261018051610220526020610200602461021c60206117536000396000515afa611362573d600060003e3d6000fd5b60203d1061170e57610200516101e0511161170e5761018051604052600160605261138e610260610ef4565b610260805161020052602081015161022052604081015161024052506370a082316102605261018051610280526020610260602461027c60206117536000396000515afa6113e1573d600060003e3d6000fd5b60203d1061170e57610260516102005161022051426102405180821061170e578082039050905080820282158284830414171561170e579050905080821061170e578082039050905080821061170e57808203905090506101c0511161170e576101c0516101e0514280821061170e578082039050905080801561170e5782049050905061026052610260516101e0514280821061170e578082039050905080820282158284830414171561170e5790509050610280526102005161028051818183011061170e5780820190509050610200526102205161026051818183011061170e5780820190509050610220526002610180516020526000526040600020610200518155610220516001820155610240516002820155506003610180516020526000526040600020806101e05160205260005260406000209050805461026051818183011061170e57808201905090508155506101a051604052600060605261154d6102a0610ef4565b6102a0805161020052602081015161022052604081015161024052506102005161028051818183011061170e5780820190509050610200526102205161026051818183011061170e57808201905090506102205260046101a05160205260005260406000206102005181556102205160018201556102405160028201555060056101a0516020526000526040600020806101e05160205260005260406000209050805461026051818183011061170e57808201905090508155506101a051610180517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101c0516102a05260206102a0a36101a051610180517f9c0aa947e19ab1e2400ff167e2cb40414b570fdaf31ab646a16749ca3c4301ad610280516102a052610260516102c052426102e05260606102a0a360046101805160205260005260406000206101805160405260006060526116aa6102a0610ef4565b6102a0805182556020810151600183015560408101516002830155505060026101a05160205260005260406000206101a05160405260016060526116ef6102a0610ef4565b6102a08051825560208101516001830155604081015160028301555050565b600080fd005b600080fd"
      },
      "runtimeBytecode": {
        "bytecode": ""
      },
      "abi": [
        {
          "type": "event",
          "name": "Approval",
          "inputs": [
            { "name": "_owner", "type": "address", "indexed": true },
            { "name": "_spender", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Transfer",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Boost",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_bias", "type": "uint256", "indexed": false },
            { "name": "_slope", "type": "uint256", "indexed": false },
            { "name": "_start", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Migrate",
          "inputs": [
            { "name": "_token_id", "type": "uint256", "indexed": true }
          ],
          "anonymous": false
        },
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_boost_v1", "type": "address" },
            { "name": "_ve", "type": "address" }
          ]
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" },
            { "name": "_from", "type": "address" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "migrate",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_token_id", "type": "uint256" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "checkpoint_user",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "approve",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "permit",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_owner", "type": "address" },
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" },
            { "name": "_deadline", "type": "uint256" },
            { "name": "_v", "type": "uint8" },
            { "name": "_r", "type": "bytes32" },
            { "name": "_s", "type": "bytes32" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "increaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_added_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "decreaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_subtracted_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "balanceOf",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "adjusted_balance_of",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "totalSupply",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegable_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "name",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "symbol",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "decimals",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint8" }]
        },
        {
          "type": "function",
          "name": "BOOST_V1",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "bytes32" }]
        },
        {
          "type": "function",
          "name": "VE",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "allowance",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "address" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "nonces",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "delegated_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "received_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "migrated",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "uint256" }],
          "outputs": [{ "name": "", "type": "bool" }]
        }
      ],
      "userdoc": {},
      "devdoc": { "title": "Boost Delegation V2", "author": "CurveFi" }
    },
    "BoostV2Sidechain": {
      "contractName": "BoostV2Sidechain",
      "sourceId": "BoostV2Sidechain.vy",
      "deploymentBytecode": {
        "bytecode": "0x602061165a6000396000518060a01c611655576040527fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472610160527f576a762e50ddf4c74071046cf7b508f5d87c41676ea1b6c8bf07aba60e5b6306610180527fd61c1033330c368dfc371f5b1e7133f4794e104642e5a3c87aba7a6a3441c8ff6101a052466101c052306101e05260014303406102005260c0610140526101408051602082012090506300001555526040516300001575523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060605260206060a36115556100ff6300000000396115556040016300000000f3600436101561000d57610b31565b60003560e01c346115505763a2114cdb811861002d573361032052610048565b63b4b3c2498118610154576064358060a01c61155057610320525b6004358060a01c611550576103005233610320511461012c57600061032051602052600052604060002080336020526000526040600020905054610340527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610340511461012c5761034051602435808210611550578082039050905060006103205160205260005260406000208033602052600052604060002090505533610320517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610340516024358082106115505780820390509050610360526020610360a35b6103205161018052610300516101a0526024356101c0526044356101e0526101526110d4565b005b637de6806181186101fa576004358060a01c611550576101805260026101805160205260005260406000206101805160405260016060526101966101a0610d16565b6101a0805182556020810151600183015560408101516002830155505060046101805160205260005260406000206101805160405260006060526101db6101a0610d16565b6101a08051825560208101516001830155604081015160028301555050005b63095ea7b38118610271576004358060a01c611550576040526024356000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63d505accf8118610463576004358060a01c611550576040526024358060a01c611550576060526084358060081c6115505760805260006040511461155057606435421161155057600160405160205260005260406000205460a05260006002610360527f19010000000000000000000000000000000000000000000000000000000000006103805261036080516020820183610580018151815250508083019250505060206115556000396000518161058001526020810190507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96104a0526040516104c0526060516104e0526044356105005260a051610520526064356105405260c0610480526104808051602082012090508161058001526020810190508061056052610560905080516020820120905060c05260405160c05160e0526080516101005260a4356101205260c4356101405260206000608060e060015afa5060005118611550576044356000604051602052600052604060002080606051602052600052604060002090505560a05160018181830110611550578082019050905060016040516020526000526040600020556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443560e052602060e0a3600160e052602060e0f35b63395093518118610510576004358060a01c611550576040526000336020526000526040600020806040516020526000526040600020905054602435818183011061155057808201905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b63a457c2d781186105bb576004358060a01c61155057604052600033602052600052604060002080604051602052600052604060002090505460243580821061155057808203905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b6370a0823181186105ef576004358060a01c6115505761024052602061024051610140526105ea610260610f76565b610260f35b6318160ddd81186106345760206318160ddd604052602060406004605c60206115756000396000515afa610628573d600060003e3d6000fd5b60203d10611550576040f35b630a767cc681186106c9576004358060a01c61155057610140526101405160405260016060526106656101c0610b37565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090506101c05260206101c0f35b6322c18bb6811861075e576004358060a01c61155057610140526101405160405260006060526106fa6101c0610b37565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090506101c05260206101c0f35b63ca8309468118610844576004358060a01c611550576101405261014051604052600160605261078f6101c0610b37565b6101c080516101605260208101516101805260408101516101a052506370a082316101c052610140516101e05260206101c060246101dc60206115756000396000515afa6107e2573d600060003e3d6000fd5b60203d10611550576101c0516101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090508082106115505780820390509050610200526020610200f35b6306fdde0381186108c45760208060805260136040527f566f74652d457363726f77656420426f6f7374000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b6395d89b4181186109445760208060805260076040527f7665426f6f7374000000000000000000000000000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b63313ce567811861095a57601260405260206040f35b633644e515811861097957602061155560003960005160405260206040f35b63c863657d811861099857602061157560003960005160405260206040f35b63dd62ed3e81186109ea576004358060a01c611550576040526024358060a01c611550576060526000604051602052600052604060002080606051602052600052604060002090505460805260206080f35b637ecebe008118610a1d576004358060a01c61155057604052600160405160205260005260406000205460605260206060f35b63f3598ad98118610a62576004358060a01c611550576040526002604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b63356a46808118610aa6576004358060a01c611550576040526003604051602052600052604060002080602435602052600052604060002090505460605260206060f35b63df0cb9348118610aeb576004358060a01c611550576040526004604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b635ad600c98118610b2f576004358060a01c611550576040526005604051602052600052604060002080602435602052600052604060002090505460605260206060f35b505b60006000fd5b606036608037606051610b6f57600460405160205260005260406000208054608052600181015460a052600281015460c05250610b96565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610ba2574260c0525b4260c05118610bc657608051815260a051602082015260c051604082015250610d14565b60c05162093a808082049050905062093a80808202821582848304141715611550579050905060e052600060ff905b806101005260e05162093a808181830110611550578082019050905060e05260006101205260e0514210610c8057606051610c5557600560405160205260005260406000208060e051602052600052604060002090505461012052610c85565b600360405160205260005260406000208060e051602052600052604060002090505461012052610c85565b4260e0525b60805160a05160e05160c05180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905060805260a05161012051808210611550578082039050905060a05260e05160c0524260e05118610cf057610cfb565b600101818118610bf5575b5050608051815260a051602082015260c0516040820152505b565b606036608037606051610d4e57600460405160205260005260406000208054608052600181015460a052600281015460c05250610d75565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610d81574260c0525b4260c05118610da557608051815260a051602082015260c051604082015250610f74565b600060e05260c05162093a808082049050905062093a80808202821582848304141715611550579050905061010052600060ff905b80610120526101005162093a808181830110611550578082019050905061010052600061014052610100514210610e6a57606051610e3e57600560405160205260005260406000208061010051602052600052604060002090505461014052610e70565b600360405160205260005260406000208061010051602052600052604060002090505461014052610e70565b42610100525b60a0516101005160c051808210611550578082039050905080820282158284830414171561155057905090506101605260e051610160518181830110611550578082019050905060e05260805161016051808210611550578082039050905060805260a05161014051808210611550578082039050905060a0526101005160c052426101005118610f0057610f0b565b600101818118610dda575b505060605115610f1c576000610f24565b600060e05114155b15610f5d5760006040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a35b608051815260a051602082015260c0516040820152505b565b6370a0823161018052610140516101a0526020610180602461019c60206115756000396000515afa610fad573d600060003e3d6000fd5b60203d10611550576101805161016052610140516040526001606052610fd46101e0610b37565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c05180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905080821061155057808203905090506101605261014051604052600060605261105a6101e0610b37565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c051808210611550578082039050905080820282158284830414171561155057905090508082106115505780820390509050818183011061155057808201905090506101605261016051815250565b6101a051610180516102205260006102405260016102005260006002905b602081026102200151831861110c57600061020052611117565b6001018181186110f2575b5050610200519050156115505760006101c0511461155057426101e0511115611550576101e05162093a80808206905090506115505763cbf9fe5f6102005261018051610220526040610200602461021c60206115756000396000515afa611184573d600060003e3d6000fd5b60403d10611550576102005180600f0b811861155057610260526102205161028052610260602081019050516101e05111611550576101805160405260016060526111d0610260610d16565b610260805161020052602081015161022052604081015161024052506370a082316102605261018051610280526020610260602461027c60206115756000396000515afa611223573d600060003e3d6000fd5b60203d1061155057610260516102005161022051426102405180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905080821061155057808203905090506101c05111611550576101c0516101e0514280821061155057808203905090508080156115505782049050905061026052610260516101e05142808210611550578082039050905080820282158284830414171561155057905090506102805261020051610280518181830110611550578082019050905061020052610220516102605181818301106115505780820190509050610220526002610180516020526000526040600020610200518155610220516001820155610240516002820155506003610180516020526000526040600020806101e05160205260005260406000209050805461026051818183011061155057808201905090508155506101a051604052600060605261138f6102a0610d16565b6102a080516102005260208101516102205260408101516102405250610200516102805181818301106115505780820190509050610200526102205161026051818183011061155057808201905090506102205260046101a05160205260005260406000206102005181556102205160018201556102405160028201555060056101a0516020526000526040600020806101e05160205260005260406000209050805461026051818183011061155057808201905090508155506101a051610180517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101c0516102a05260206102a0a36101a051610180517f9c0aa947e19ab1e2400ff167e2cb40414b570fdaf31ab646a16749ca3c4301ad610280516102a052610260516102c052426102e05260606102a0a360046101805160205260005260406000206101805160405260006060526114ec6102a0610d16565b6102a0805182556020810151600183015560408101516002830155505060026101a05160205260005260406000206101a05160405260016060526115316102a0610d16565b6102a08051825560208101516001830155604081015160028301555050565b600080fd005b600080fd"
      },
      "runtimeBytecode": {
        "bytecode": "0x600436101561000d57610b31565b60003560e01c346115505763a2114cdb811861002d573361032052610048565b63b4b3c2498118610154576064358060a01c61155057610320525b6004358060a01c611550576103005233610320511461012c57600061032051602052600052604060002080336020526000526040600020905054610340527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610340511461012c5761034051602435808210611550578082039050905060006103205160205260005260406000208033602052600052604060002090505533610320517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610340516024358082106115505780820390509050610360526020610360a35b6103205161018052610300516101a0526024356101c0526044356101e0526101526110d4565b005b637de6806181186101fa576004358060a01c611550576101805260026101805160205260005260406000206101805160405260016060526101966101a0610d16565b6101a0805182556020810151600183015560408101516002830155505060046101805160205260005260406000206101805160405260006060526101db6101a0610d16565b6101a08051825560208101516001830155604081015160028301555050005b63095ea7b38118610271576004358060a01c611550576040526024356000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63d505accf8118610463576004358060a01c611550576040526024358060a01c611550576060526084358060081c6115505760805260006040511461155057606435421161155057600160405160205260005260406000205460a05260006002610360527f19010000000000000000000000000000000000000000000000000000000000006103805261036080516020820183610580018151815250508083019250505060206115556000396000518161058001526020810190507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96104a0526040516104c0526060516104e0526044356105005260a051610520526064356105405260c0610480526104808051602082012090508161058001526020810190508061056052610560905080516020820120905060c05260405160c05160e0526080516101005260a4356101205260c4356101405260206000608060e060015afa5060005118611550576044356000604051602052600052604060002080606051602052600052604060002090505560a05160018181830110611550578082019050905060016040516020526000526040600020556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443560e052602060e0a3600160e052602060e0f35b63395093518118610510576004358060a01c611550576040526000336020526000526040600020806040516020526000526040600020905054602435818183011061155057808201905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b63a457c2d781186105bb576004358060a01c61155057604052600033602052600052604060002080604051602052600052604060002090505460243580821061155057808203905090506060526060516000336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560605160805260206080a3600160805260206080f35b6370a0823181186105ef576004358060a01c6115505761024052602061024051610140526105ea610260610f76565b610260f35b6318160ddd81186106345760206318160ddd604052602060406004605c60206115756000396000515afa610628573d600060003e3d6000fd5b60203d10611550576040f35b630a767cc681186106c9576004358060a01c61155057610140526101405160405260016060526106656101c0610b37565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090506101c05260206101c0f35b6322c18bb6811861075e576004358060a01c61155057610140526101405160405260006060526106fa6101c0610b37565b6101c080516101605260208101516101805260408101516101a052506101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090506101c05260206101c0f35b63ca8309468118610844576004358060a01c611550576101405261014051604052600160605261078f6101c0610b37565b6101c080516101605260208101516101805260408101516101a052506370a082316101c052610140516101e05260206101c060246101dc60206115756000396000515afa6107e2573d600060003e3d6000fd5b60203d10611550576101c0516101605161018051426101a0518082106115505780820390509050808202821582848304141715611550579050905080821061155057808203905090508082106115505780820390509050610200526020610200f35b6306fdde0381186108c45760208060805260136040527f566f74652d457363726f77656420426f6f7374000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b6395d89b4181186109445760208060805260076040527f7665426f6f7374000000000000000000000000000000000000000000000000006060526040816080018151808252602083016020830181518152505050805180602083010181600003601f163682375050601f19601f8251602001011690509050810190506080f35b63313ce567811861095a57601260405260206040f35b633644e515811861097957602061155560003960005160405260206040f35b63c863657d811861099857602061157560003960005160405260206040f35b63dd62ed3e81186109ea576004358060a01c611550576040526024358060a01c611550576060526000604051602052600052604060002080606051602052600052604060002090505460805260206080f35b637ecebe008118610a1d576004358060a01c61155057604052600160405160205260005260406000205460605260206060f35b63f3598ad98118610a62576004358060a01c611550576040526002604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b63356a46808118610aa6576004358060a01c611550576040526003604051602052600052604060002080602435602052600052604060002090505460605260206060f35b63df0cb9348118610aeb576004358060a01c611550576040526004604051602052600052604060002080546060526001810154608052600281015460a0525060606060f35b635ad600c98118610b2f576004358060a01c611550576040526005604051602052600052604060002080602435602052600052604060002090505460605260206060f35b505b60006000fd5b606036608037606051610b6f57600460405160205260005260406000208054608052600181015460a052600281015460c05250610b96565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610ba2574260c0525b4260c05118610bc657608051815260a051602082015260c051604082015250610d14565b60c05162093a808082049050905062093a80808202821582848304141715611550579050905060e052600060ff905b806101005260e05162093a808181830110611550578082019050905060e05260006101205260e0514210610c8057606051610c5557600560405160205260005260406000208060e051602052600052604060002090505461012052610c85565b600360405160205260005260406000208060e051602052600052604060002090505461012052610c85565b4260e0525b60805160a05160e05160c05180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905060805260a05161012051808210611550578082039050905060a05260e05160c0524260e05118610cf057610cfb565b600101818118610bf5575b5050608051815260a051602082015260c0516040820152505b565b606036608037606051610d4e57600460405160205260005260406000208054608052600181015460a052600281015460c05250610d75565b600260405160205260005260406000208054608052600181015460a052600281015460c052505b60c051610d81574260c0525b4260c05118610da557608051815260a051602082015260c051604082015250610f74565b600060e05260c05162093a808082049050905062093a80808202821582848304141715611550579050905061010052600060ff905b80610120526101005162093a808181830110611550578082019050905061010052600061014052610100514210610e6a57606051610e3e57600560405160205260005260406000208061010051602052600052604060002090505461014052610e70565b600360405160205260005260406000208061010051602052600052604060002090505461014052610e70565b42610100525b60a0516101005160c051808210611550578082039050905080820282158284830414171561155057905090506101605260e051610160518181830110611550578082019050905060e05260805161016051808210611550578082039050905060805260a05161014051808210611550578082039050905060a0526101005160c052426101005118610f0057610f0b565b600101818118610dda575b505060605115610f1c576000610f24565b600060e05114155b15610f5d5760006040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a35b608051815260a051602082015260c0516040820152505b565b6370a0823161018052610140516101a0526020610180602461019c60206115756000396000515afa610fad573d600060003e3d6000fd5b60203d10611550576101805161016052610140516040526001606052610fd46101e0610b37565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c05180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905080821061155057808203905090506101605261014051604052600060605261105a6101e0610b37565b6101e080516101805260208101516101a05260408101516101c0525061016051610180516101a051426101c051808210611550578082039050905080820282158284830414171561155057905090508082106115505780820390509050818183011061155057808201905090506101605261016051815250565b6101a051610180516102205260006102405260016102005260006002905b602081026102200151831861110c57600061020052611117565b6001018181186110f2575b5050610200519050156115505760006101c0511461155057426101e0511115611550576101e05162093a80808206905090506115505763cbf9fe5f6102005261018051610220526040610200602461021c60206115756000396000515afa611184573d600060003e3d6000fd5b60403d10611550576102005180600f0b811861155057610260526102205161028052610260602081019050516101e05111611550576101805160405260016060526111d0610260610d16565b610260805161020052602081015161022052604081015161024052506370a082316102605261018051610280526020610260602461027c60206115756000396000515afa611223573d600060003e3d6000fd5b60203d1061155057610260516102005161022051426102405180821061155057808203905090508082028215828483041417156115505790509050808210611550578082039050905080821061155057808203905090506101c05111611550576101c0516101e0514280821061155057808203905090508080156115505782049050905061026052610260516101e05142808210611550578082039050905080820282158284830414171561155057905090506102805261020051610280518181830110611550578082019050905061020052610220516102605181818301106115505780820190509050610220526002610180516020526000526040600020610200518155610220516001820155610240516002820155506003610180516020526000526040600020806101e05160205260005260406000209050805461026051818183011061155057808201905090508155506101a051604052600060605261138f6102a0610d16565b6102a080516102005260208101516102205260408101516102405250610200516102805181818301106115505780820190509050610200526102205161026051818183011061155057808201905090506102205260046101a05160205260005260406000206102005181556102205160018201556102405160028201555060056101a0516020526000526040600020806101e05160205260005260406000209050805461026051818183011061155057808201905090508155506101a051610180517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101c0516102a05260206102a0a36101a051610180517f9c0aa947e19ab1e2400ff167e2cb40414b570fdaf31ab646a16749ca3c4301ad610280516102a052610260516102c052426102e05260606102a0a360046101805160205260005260406000206101805160405260006060526114ec6102a0610d16565b6102a0805182556020810151600183015560408101516002830155505060026101a05160205260005260406000206101a05160405260016060526115316102a0610d16565b6102a08051825560208101516001830155604081015160028301555050565b600080fd"
      },
      "abi": [
        {
          "type": "event",
          "name": "Approval",
          "inputs": [
            { "name": "_owner", "type": "address", "indexed": true },
            { "name": "_spender", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Transfer",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_value", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "Boost",
          "inputs": [
            { "name": "_from", "type": "address", "indexed": true },
            { "name": "_to", "type": "address", "indexed": true },
            { "name": "_bias", "type": "uint256", "indexed": false },
            { "name": "_slope", "type": "uint256", "indexed": false },
            { "name": "_start", "type": "uint256", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_ve", "type": "address" }]
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "boost",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_to", "type": "address" },
            { "name": "_amount", "type": "uint256" },
            { "name": "_endtime", "type": "uint256" },
            { "name": "_from", "type": "address" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "checkpoint_user",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "approve",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "permit",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_owner", "type": "address" },
            { "name": "_spender", "type": "address" },
            { "name": "_value", "type": "uint256" },
            { "name": "_deadline", "type": "uint256" },
            { "name": "_v", "type": "uint8" },
            { "name": "_r", "type": "bytes32" },
            { "name": "_s", "type": "bytes32" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "increaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_added_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "decreaseAllowance",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_spender", "type": "address" },
            { "name": "_subtracted_value", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "bool" }]
        },
        {
          "type": "function",
          "name": "balanceOf",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "totalSupply",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegable_balance",
          "stateMutability": "view",
          "inputs": [{ "name": "_user", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "name",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "symbol",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "string" }]
        },
        {
          "type": "function",
          "name": "decimals",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "uint8" }]
        },
        {
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "bytes32" }]
        },
        {
          "type": "function",
          "name": "VE",
          "stateMutability": "pure",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "allowance",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "address" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "nonces",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "delegated",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "delegated_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "received",
          "stateMutability": "view",
          "inputs": [{ "name": "arg0", "type": "address" }],
          "outputs": [
            {
              "name": "",
              "type": "tuple",
              "components": [
                { "name": "bias", "type": "uint256" },
                { "name": "slope", "type": "uint256" },
                { "name": "ts", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "type": "function",
          "name": "received_slope_changes",
          "stateMutability": "view",
          "inputs": [
            { "name": "arg0", "type": "address" },
            { "name": "arg1", "type": "uint256" }
          ],
          "outputs": [{ "name": "", "type": "uint256" }]
        }
      ],
      "userdoc": {},
      "devdoc": {
        "title": "Boost Delegation V2 - Sidechain Edition",
        "author": "CurveFi"
      }
    },
    "Migrate": {
      "contractName": "Migrate",
      "sourceId": "Migrate.vy",
      "deploymentBytecode": {
        "bytecode": "0x60206101566000396000518060a01c6101515760405260206101766000396000518060a01c610151576060526318160ddd60a052602060a0600460bc6040515afa61004f573d600060003e3d6000fd5b60203d106101515760a0516080526000610100905b8060a05260805160a0511861007857610133565b634f6ccce760e05260a05161010052602060e0602460fc6040515afa6100a3573d600060003e3d6000fd5b60203d106101515760e05160c05242636d1ac9b560e05260c05161010052602060e0602460fc6040515afa6100dd573d600060003e3d6000fd5b60203d106101515760e051116100f257610128565b63454b060860e05260c051610100526060513b156101515760006000602460fc60006060515af1610128573d600060003e3d6000fd5b600101818118610064575b505033ff6100006101506300000120396100006000016300000120f3005b600080fd"
      },
      "runtimeBytecode": { "bytecode": "0x" },
      "abi": [
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_boost_v1", "type": "address" },
            { "name": "_boost_v2", "type": "address" }
          ]
        }
      ],
      "userdoc": {},
      "devdoc": {}
    },
    "DelegationProxy": {
      "contractName": "DelegationProxy",
      "sourceId": "DelegationProxy.vy",
      "deploymentBytecode": {
        "bytecode": "0x606061048061014039602061048060c03960c05160a01c61047b57602060206104800160c03960c05160a01c61047b57602060406104800160c03960c05160a01c61047b57610140516000556101605160025561018051600155610140516101a0527f963001cf3a0c5cdcfc26b2710abe2fe859b3565482158b7cb34f59b6eaff521260206101a0a161046356600436101561000d576103cb565b600035601c52600051346103d15763bbf7408a8114156100cd5760043560a01c6103d157600054610140526101405161008f5760206101e060246370a08231610160526004356101805261017c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa156103d157601f3d11156103d1576000506101e05160005260206000f35b60206101e0602463bbf7408a610160526004356101805261017c610140515afa156103d157601f3d11156103d1576000506101e05160005260206000f35b634b74efb781141561016957600254610160526001546101805260006101405261014061012060006002818352015b6101205160200261016001513314156101185760018352610129565b5b81516001018083528114156100fc575b50505061014051156103d15760006000556000610140527f963001cf3a0c5cdcfc26b2710abe2fe859b3565482158b7cb34f59b6eaff52126020610140a1005b63f4b446a38114156101f15760043560a01c6103d1576002543314156103d15760206101c0602463bbf7408a61014052336101605261015c6004355afa156103d157601f3d11156103d1576000506101c050600435600055600435610140527f963001cf3a0c5cdcfc26b2710abe2fe859b3565482158b7cb34f59b6eaff52126020610140a1005b63e3a8d3ab8114156102a25760043560a01c6103d15760243560a01c6103d157600254331461025f576308c379a061014052602061016052600d610180527f4163636573732064656e696564000000000000000000000000000000000000006101a05261018050606461015cfd5b60043560045560243560035560043561014052602435610160527f8f5425b30e6270c1011973f0ccf6d7795cc10623631523e4c45d2837d337d5746040610140a1005b63618939218114156103515760025433146102fc576308c379a061014052602061016052600d610180527f4163636573732064656e696564000000000000000000000000000000000000006101a05261018050606461015cfd5b600454610140526003546101605261014051600255610160516001556101405161018052610160516101a0527fe8d7597c306457cd1fa4eb0e165a1a4c3aea9808e274ea97c6b5d9f73a3c477f6040610180a1005b63df5cf7238114156103695760005460005260206000f35b63680c77838114156103815760015460005260206000f35b6347c8715f8114156103995760025460005260206000f35b635866507a8114156103b15760035460005260206000f35b633c2fcbf48114156103c95760045460005260206000f35b505b60006000fd5b600080fd5b61008d6104630361008d60003961008d610463036000f35b600080fd"
      },
      "runtimeBytecode": {
        "bytecode": "0x600436101561000d576103cb565b600035601c52600051346103d15763bbf7408a8114156100cd5760043560a01c6103d157600054610140526101405161008f5760206101e060246370a08231610160526004356101805261017c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa156103d157601f3d11156103d1576000506101e05160005260206000f35b60206101e0602463bbf7408a610160526004356101805261017c610140515afa156103d157601f3d11156103d1576000506101e05160005260206000f35b634b74efb781141561016957600254610160526001546101805260006101405261014061012060006002818352015b6101205160200261016001513314156101185760018352610129565b5b81516001018083528114156100fc575b50505061014051156103d15760006000556000610140527f963001cf3a0c5cdcfc26b2710abe2fe859b3565482158b7cb34f59b6eaff52126020610140a1005b63f4b446a38114156101f15760043560a01c6103d1576002543314156103d15760206101c0602463bbf7408a61014052336101605261015c6004355afa156103d157601f3d11156103d1576000506101c050600435600055600435610140527f963001cf3a0c5cdcfc26b2710abe2fe859b3565482158b7cb34f59b6eaff52126020610140a1005b63e3a8d3ab8114156102a25760043560a01c6103d15760243560a01c6103d157600254331461025f576308c379a061014052602061016052600d610180527f4163636573732064656e696564000000000000000000000000000000000000006101a05261018050606461015cfd5b60043560045560243560035560043561014052602435610160527f8f5425b30e6270c1011973f0ccf6d7795cc10623631523e4c45d2837d337d5746040610140a1005b63618939218114156103515760025433146102fc576308c379a061014052602061016052600d610180527f4163636573732064656e696564000000000000000000000000000000000000006101a05261018050606461015cfd5b600454610140526003546101605261014051600255610160516001556101405161018052610160516101a0527fe8d7597c306457cd1fa4eb0e165a1a4c3aea9808e274ea97c6b5d9f73a3c477f6040610180a1005b63df5cf7238114156103695760005460005260206000f35b63680c77838114156103815760015460005260206000f35b6347c8715f8114156103995760025460005260206000f35b635866507a8114156103b15760035460005260206000f35b633c2fcbf48114156103c95760045460005260206000f35b505b60006000fd5b600080fd"
      },
      "abi": [
        {
          "type": "event",
          "name": "CommitAdmins",
          "inputs": [
            { "name": "ownership_admin", "type": "address", "indexed": false },
            { "name": "emergency_admin", "type": "address", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "ApplyAdmins",
          "inputs": [
            { "name": "ownership_admin", "type": "address", "indexed": false },
            { "name": "emergency_admin", "type": "address", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "event",
          "name": "DelegationSet",
          "inputs": [
            { "name": "delegation", "type": "address", "indexed": false }
          ],
          "anonymous": false
        },
        {
          "type": "constructor",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_delegation", "type": "address" },
            { "name": "_o_admin", "type": "address" },
            { "name": "_e_admin", "type": "address" }
          ]
        },
        {
          "type": "function",
          "name": "adjusted_balance_of",
          "stateMutability": "view",
          "inputs": [{ "name": "_account", "type": "address" }],
          "outputs": [{ "name": "", "type": "uint256" }]
        },
        {
          "type": "function",
          "name": "kill_delegation",
          "stateMutability": "nonpayable",
          "inputs": [],
          "outputs": []
        },
        {
          "type": "function",
          "name": "set_delegation",
          "stateMutability": "nonpayable",
          "inputs": [{ "name": "_delegation", "type": "address" }],
          "outputs": []
        },
        {
          "type": "function",
          "name": "commit_set_admins",
          "stateMutability": "nonpayable",
          "inputs": [
            { "name": "_o_admin", "type": "address" },
            { "name": "_e_admin", "type": "address" }
          ],
          "outputs": []
        },
        {
          "type": "function",
          "name": "apply_set_admins",
          "stateMutability": "nonpayable",
          "inputs": [],
          "outputs": []
        },
        {
          "type": "function",
          "name": "delegation",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "emergency_admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "ownership_admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "future_emergency_admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        },
        {
          "type": "function",
          "name": "future_ownership_admin",
          "stateMutability": "view",
          "inputs": [],
          "outputs": [{ "name": "", "type": "address" }]
        }
      ],
      "userdoc": {
        "methods": {
          "adjusted_balance_of(address)": {
            "notice": "Get the adjusted veCRV balance from the active boost delegation contract"
          },
          "kill_delegation()": {
            "notice": "Set delegation contract to 0x00, disabling boost delegation"
          },
          "set_delegation(address)": {
            "notice": "Set the delegation contract"
          },
          "commit_set_admins(address,address)": {
            "notice": "Set ownership admin to `_o_admin` and emergency admin to `_e_admin`"
          },
          "apply_set_admins()": {
            "notice": "Apply the effects of `commit_set_admins`"
          }
        }
      },
      "devdoc": {
        "title": "Voting Escrow Delegation Proxy",
        "author": "Curve Finance",
        "license": "MIT",
        "methods": {
          "adjusted_balance_of(address)": {
            "params": {
              "_account": "The account to query the adjusted veCRV balance of"
            },
            "returns": { "_0": "veCRV balance" }
          },
          "kill_delegation()": {
            "details": "Callable by the emergency admin in case of an issue with the delegation logic"
          },
          "set_delegation(address)": {
            "details": "Only callable by the ownership admin",
            "params": {
              "_delegation": "`VotingEscrowDelegation` deployment address"
            }
          },
          "commit_set_admins(address,address)": {
            "params": {
              "_o_admin": "Ownership admin",
              "_e_admin": "Emergency admin"
            }
          }
        }
      }
    }
  }
}
